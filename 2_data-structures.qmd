---
title: "R's data structures and data types"
author: "Software Carpentry / Jelmer Poelstra"
date: 2025-02-11
editor_options: 
  chunk_output_type: console

---

-----

<br>

## Introduction

#### What we'll cover

In this session, we will learn about R's **data structures** and **data types**.

- Data structures are the kinds of objects that R can store data in.
  Here, we will cover the two most common ones: _vectors_ and _data frames_.

- Data types are how R distinguishes between different kinds of data like numbers
  and character strings.
  Here, we'll talk about the 4 main data types:
  `character`, `integer`, `double`, and `logical.`

#### Setting up

To make it easier to keep track of what we do,
we will write our code in an script and send it to the console from there:

1. _Open a new R script_ (Click the **`+`** symbol in toolbar at the top, then click `R Script`)
   ^[Or Click `File` => `New file` => `R Script`]
   
2. _Save the script_ straight away as `data-structures.R` --
   you can save it anywhere you like, though it is probably best to save it in a
   folder specifically for this workshop.

<br>

## Data structure 1: Vectors

The first data structure we will explore is the simplest: the vector.
A vector in R is essentially _a list of one or more items_.
Moving forward, we'll call such individual items "elements".

### Single-element vectors and quoting

Vectors can consist of just a single element,
so each of the two lines of code below creates a vector:

```{r}
vector1 <- 8
vector2 <- "panda"
```

Two things are worth noting about the `"panda"` example,
which is a so-called **character string** (or _string_ for short):

- `"panda"` constitutes _one element_, not 5 (its number of letters).
- Unlike when dealing with numbers, we have to _quote the string_.^[
  Either double quotes (`"..."`) or single quotes (`'...'`) work,
  but the former are most commonly used by convention.]

Character strings need to be quoted because they are otherwise interpreted as
R objects -- for example, because our vectors `vector1` and `vector2` are objects,
we refer to them without quotes:

```{r}
# [Note that R will show auto-complete options after you type 3 characters]
vector1
vector2
```

Therefore, the code below doesn't work, because there is no _object called `panda`_:

```{r, error=TRUE}
vector_fail <- panda
```

<hr style="height:1pt; visibility:hidden;" />

::: callout-tip
#### Use the up arrow to retrieve previous commands
In the R console,
you can press the **up arrow** <kbd>â†‘</kbd> to retrieve the previous command,
and do so repeatedly to go back to older commands.
Let's practice that to retrieve our previous `vector1` command.
:::

<hr style="height:1pt; visibility:hidden;" />

### Multi-element vectors

A common way to make vectors with **multiple elements** is
by using the `c` (combine) function:

```{r}
c(2, 6, 3)
```

`c()` can also **append** elements to an existing vector:

```{r}
# First we create a vector:
vector_to_append <- c("vhagar", "meleys")
vector_to_append

# Then we append another element to it:
c(vector_to_append, "balerion the dread")
```

<hr style="height:1pt; visibility:hidden;" />

To create vectors with **series of numbers**, a couple of shortcuts are available.
First, you can make series of whole numbers with the `:` operator:

```{r}
1:10
```

Second, you can use a function like `seq()` for fine control over the sequence: 

```{r}
vector_seq <- seq(from = 6, to = 8, by = 0.2)
vector_seq
```

<hr style="height:1pt; visibility:hidden;" />

### Vectorization

Consider the output of this command that seemingly multiplies a vector by two: 

```{r}
vector_seq * 2
```

Above, **every individual element in `vector_seq` was multiplied by 2**.
We call this behavior "vectorization" and this is a key feature of the R language^[
In many other languages you'd need a special construct like a loop to operate
on each value in a vector.
].

Alternatively, you may have expected this code to _repeat_ `vector_seq` twice,
but this did not happen! (R has the function `rep()` for that.)

::: callout-note
### More about vectorization
For more about vectorization, see
[episode 9](https://swcarpentry.github.io/r-novice-gapminder/instructor/09-vectorization.html)
from the Carpentries lesson that this material is based on.
:::

<br>

::: exercise
### {{< fa user-edit >}} Challenge 1 {-}

<hr style="height:1pt; visibility:hidden;" />

**A.**
Start by making a vector `x` with the whole numbers 1 through 26.
Then, subtract 0.5 from each element in the vector and save the result in vector `y`.
Check your results by printing both vectors.

<details><summary>Click for the solution</summary>

```{r}
x <- 1:26
x

y <- x - 0.5
y
```

</details>

<hr style="height:1pt; visibility:hidden;" />

**B.** 
What do you think will be the result of the following operation?

```{r, eval=FALSE}
1:5 * 1:5
```

<details><summary>Click for the solution</summary>

```{r}
1:5 * 1:5
```

Both vectors are of length 5 which will lead to "element-wise matching":
the first element in the first vector will be multiplied with the first element
in the second vector,
the second element in the first vector will be multiplied with the second element
in the second vector, and so on.

</details>
:::

-------

<br>

### Exploring vectors

R has many built-in functions to get information about vectors and other types of
objects, such as:

Get the **first and last few elements**, respectively, with `head()` and `tail()`:

```{r}
# Print the first 6 elements:
head(vector_seq)

# Both head and tail take an argument `n` to specify the number of elements to print:
head(vector_seq, n = 2)

# Print the last 6 elements:
tail(vector_seq)
```

<hr style="height:1pt; visibility:hidden;" />

Get the **number of elements** with `length()`:

```{r}
length(vector_seq)
```

<hr style="height:1pt; visibility:hidden;" />

Get **arithmetic summaries** like `sum()` and `mean()` for vectors with numbers:

```{r}
# sum() will sum the values of all elements
sum(vector_seq)

# mean() will compute the mean (average) across all elements
mean(vector_seq)
```

<br>

### Extracting elements from vectors

Extracting element from objects like vectors is often referred to as **"indexing"**.
In R, we can do this using bracket notation -- for example:

- Get the second element:

  ```{r}
  vector_seq[2]
  ```

- Get the second through the fifth elements:

  ```{r}
  vector_seq[2:5]
  ```

- Get the first and eight elements:

  ```{r}
  vector_seq[c(1, 8)]
  ```

In the abstract, then, we can extract elements from a vector by using another vector,
whose values are the positional indices of the elements in the original vector.

<hr style="height:1pt; visibility:hidden;" />

::: callout-tip
### Changing elements using indexing
To _change_ elements in a vector,
simply use the bracket on the other side of the arrow:

```{r}
# Change the first element to '30':
vector_seq[1] <- 30
vector_seq
```
:::

<br>

## Data structure 2: Data frames

### R stores tabular data in "data frames"

One of R's most powerful features is its **built-in ability to deal with tabular data** --
i.e., data with rows and columns like you are familiar with from spreadsheets
like those you create with Excel.

In R, tabular data is stored in objects that are called "**data frames**",
the second R data structure we'll cover in some depth.
Let's start by making a toy data frame with information about 3 cats:

```{r}
cats <- data.frame(
  name = c("Luna", "Thomas", "Daisy"),
  coat = c("calico", "black", "tabby"),
  weight = c(2.1, 5.0, 3.2)
  )

cats
```

Above:

- We created 3 vectors and pasted them side-by-side to create a data frame
  in which _each vector constitutes a column_.
- We gave each vector a name (e.g., `coat`), and those names became the _column names_.
- The resulting data frame has 3 rows (one for each cat) and 3 columns
  (each with a type of info about the cats, like coat color).

Data frames are typically (and best) organized like above, where:

- Each column contains a different **"variable"** (e.g. coat color, weight)
- Each row contains a different **"observation"** (e.g., cat/person, sample)

<hr style="height:1pt; visibility:hidden;" />

### Extracting columns from a data frame

We can extract individual columns from a data frame using the `$` operator:

```{r}
cats$weight
cats$coat
```

This kind of operation will return a vector.

Here, we won't go into more detail about exploring or manipulating data frames,
because we will do that with the _dplyr_ package in the next session.

<br>

## Data types

### R's main Data Types

R distinguishes different kinds of data, such as character strings and numbers,
in a formal way, using several pre-defined "data types".
The behavior of R in various operations will depend heavily on the data type --
for example, the below fails:

```{r, error=TRUE}
"valerion" * 5
```

We can ask what type of data something is in R using the `typeof()` function:

```{r}
typeof("valerion")
```

So the data type is `character`,
which we commonly refer to as character strings or strings.
In formal terms, the failed command did not work because R will not allow us to
perform mathematical functions on vectors of type `character`.

<hr style="height:1pt; visibility:hidden;" />

The `character` data type typically contains letters but can have any character,
including numbers, as long as it is quoted: 

```{r}
typeof("5")
```

<hr style="height:1pt; visibility:hidden;" />

Besides `character`, the other 3 **common data types** are
`double` (also called `numeric`), `integer`, and `logical`:

- `double` / `numeric` -- numbers that can have decimal points:

```{r}
typeof(3.14)
```

- `integer` -- whole numbers only:

```{r}
typeof(1:3)
```

- `logical` (either `TRUE` or `FALSE` -- unquoted!):

```{r}
typeof(TRUE)
typeof(FALSE)
```

<hr style="height:1pt; visibility:hidden;" />

### One vector can only contain one data type 

Vectors, and therefore also individual columns in data frames,
can only **be composed of a single data type**.

R will silently pick the "best-fitting" data type when you enter or read data into
a data frame.
So let's see what the data types are in our `cats` data frame:

```{r}
str(cats)
```

- The `name` and `coat` columns are `character`, abbreviated `chr`.
- The `weight` column is `double`/`numeric`, abbreviated `num`.

<hr style="height:1pt; visibility:hidden;" />

::: exercise
### {{< fa user-edit >}} Challenge 3 {-}

What type of vector (if any) do you think each of the following will produce?

```{r, error=TRUE, eval=FALSE}
typeof("TRUE")
typeof(banana)
typeof(2, 6, "3")
```

<details><summary>Click for the solutions</summary>

1. `"TRUE"` is `character` because of the quotes around it.
2. Recall the earlier example:
   this returns an error because the object `banana` does not exist.
3. It produces a `character` vector:
   we'll talk about what happened here in the next section.

```{r, error=TRUE}
typeof("TRUE")
typeof(banana)
typeof(c(2, 6, "3"))
```

</details>
:::

<hr style="height:1pt; visibility:hidden;" />

### Automatic Type Coercion

That in the challenge above, `c(2, 6, "3")` returned a character vector,
is due to something called **type coercion**.

When R encounters a _mix of types_ (here, numbers and characters)
to be combined into a single vector, it will force them all to be the same type.
It "must" do this because, as pointed out above,
a vector can consist of only a single data type.

Type coercion can be the source of many surprises,
and is one reason we need to be aware of the basic data types and how R will
interpret them. Here is another example:

```{r}
coercion_vector <- c("a", TRUE)
coercion_vector
typeof(coercion_vector)
```

Like in two examples we've seen,
you will most commonly run into situations where
_numbers or logicals are converted to characters_.

The nitty-gritty of type coercion aside, the point is:
if your data doesn't look like what you thought it was going to look like,
type coercion may well be to blame!

<hr style="height:1pt; visibility:hidden;" />

### Manual Type Conversion

Luckily, you are not simply at the mercy of whatever R decides to do automatically,
but can convert vectors at will using the `as.` group of functions:

:::callout-tip
### Try to use RStudio's auto-complete functionality here: type "`as.`" and then press the <kbd>Tab</kbd> key.
:::

```{r}
as.double(c("0", "2", "4"))

as.character(c(0, 2, 4))
```

<hr style="height:1pt; visibility:hidden;" />

As you may have guessed, though, not all type conversions are possible:

```{r}
as.double("kiwi")
```

(`NA` is R's way of denoting _missing data_ --
see [this bonus section](#missing-values-na) for more.)

<br>

## Factors

In R, **categorical** data like different treatments in an experiment,
can be stored as "factors".
Factors are useful for statistical analyses and for plotting:
for example, they allow you to specify a custom order.

```{r}
diet_vec <- c("high", "medium", "low", "low", "medium", "high")
factor(diet_vec)
```

In the example above, we turned a regular vector into a factor.
The levels are sorted alphabetically by default,
but we can manually specify an order that makes more sense and that would carry
through if we would plot data associated with this factor:

```{r}
diet_fct <- factor(diet_vec, levels = c("low", "medium", "high"))
diet_fct
```

<hr style="height:1pt; visibility:hidden;" />

::: callout-warning
### Oddly, factors are technically not a data type
For most intents and purposes,
it makes sense to think of factors as another data type, even though technically,
they are a kind of data structure build on the `integer` data type:

```{r}
typeof(diet_fct)
```
:::

<br>

::: exercise
### {{< fa user-edit >}} Challenge 3 {-}

An important part of every data analysis is cleaning input data.
Here, you will clean a cat data set that has an added observation with a
problematic data entry.

Start by creating the new data frame:

```{r}
cats_v2 <- data.frame(
  name = c("Luna", "Misty", "Bella", "Oliver"),
  coat = c("calico", "black", "tabby", "tabby"),
  weight = c(2.1, 5.0, 3.2, "2.3 or 2.4"),
  likes_string = c(1, 0, 1, 1)
)
```

Then move on to the tasks below,
filling in the blanks (`_____`) and running the code:

```{r, eval=FALSE}
# 1. Explore the data frame,
#    including with an overview that shows the columns' data types:
cats_v2
_____(cats_v2)

# 2. The "weight" column has the incorrect data type _____.
#    The correct data type is: _____.

# 3. Correct the 4th weight with the mean of the two given values,
#    then print the data frame to see the effect:
cats_v2$weight[4] <- 2.35
cats_v2

# 4. Convert the weight column to the right data type:
cats_v2$weight <- _____(cats_v2$weight)

# 5. Calculate the mean weight of the cats:
_____
```

<details><summary>Click for the solution</summary>

```{r}
# 1. Explore the data frame,
#    including with an overview that shows the columns' data types:
cats_v2
str(cats_v2)

# 2. The "weight" column has the incorrect data type CHARACTER.
#    The correct data type is: DOUBLE.

# 3. Correct the 4th weight data point with the mean of the two given values,
#    then print the data frame to see the effect:
cats_v2$weight[4] <- 2.35
cats_v2

# 4. Convert the weight column to the right data type:
cats_v2$weight <- as.double(cats_v2$weight)

# 5. Calculate the mean weight of the cats:
mean(cats_v2$weight)
```
</details>
:::

<br>

## Bonus material for self-study

### Another Carpentries lesson

To learn more about data types and data structures, see
[this episode from a separate Carpentries lesson](https://swcarpentry.github.io/r-novice-inflammation/13-supp-data-structures.html).

### Writing and reading tabular data

First, we will write data to file that is in our R environment,
and then we will read data that is in a file into our R environment.

Via functions from an add-on package, R can interact with Excel spreadsheet files,
but keeping your data in plain-text files generally benefits reproducibility.
Tabular plain text files can be stored using:

- A _Tab_ as the column delimiter
  (these are often called TSV files, and stored with a `.tsv` extension)
- A _comma_ as the column delimiter
  (these are often called CSV files, and stored with a `.csv` extension).

We will use the `write.csv` function to write the `cats` data frame to a CSV file
in our current working directory:

```{r}
write.csv(x = cats, file = "feline-data.csv", row.names = FALSE)
```

Here, we are explicitly naming all arguments, which can be good practice for clarity:

- `x` is the R object to write to file
- `file` is the file name (which can include directories/folders)
- We are setting `row.names = FALSE` to avoid writing the row names,
  which by default are just row numbers.

::: callout-tip
### Checking out the file - and quotes around strings

In RStudio's **Files pane**,
let's find our new file, click on it, and then click "View File".
That way, the file will open in the editor, where it should look like this:

```
"name","coat","weight","likes_string"
"Luna","calico",2.1,1
"Misty","black",5,0
"Bella","tabby",3.2,1
```

Note above that R adds double quotes `"..."` around strings ---
if you want to avoid this, add `quote = FALSE` to `write.csv()`.
:::

<hr style="height:1pt; visibility:hidden;" />

To practice reading data from a file into R.
use the `read.csv()` function for the file we just created: 

```{r}
cats_reread <- read.csv(file = "feline-data.csv")
cats_reread
```

A final note:
`write.csv()` and `read.csv()` are really just two more specific convenience versions
of the `write/read.table()` functions,
which can be used to write and read in tabular data in any kind of plain text file.

<hr style="height:1pt; visibility:hidden;" />

### Missing values (`NA`)

R has a concept of missing data, which is important in statistical computing,
as not all information/measurements are always available for each sample.

In R, missing values are coded as `NA`
(and this is not a character string, so it is not quoted):

```{r}
# This vector will contain one missing value
vector_NA <- c(1, 3, NA, 7)
vector_NA
```

The main reason to bring this up so early in your R journey is that
you should be aware of the following:
many functions that operate on vectors will return `NA` if any of the elements in
the vector is `NA`:

```{r}
sum(vector_NA)
```

The way to get around this is by setting `na.rm = TRUE` in such functions,
for example:

```{r}
sum(vector_NA, na.rm = TRUE)
```

<hr style="height:1pt; visibility:hidden;" />

### More on the `logical` data type

```{r}
cats$likes_string <- c(1, 0, 1)
```

As another example, in our `cats` data, `likes_string` is numeric,
but the `1`s and `0`s actually represent `TRUE` and `FALSE`
(a common way of representing them).

```{r}
cats$likes_string
```

We could use the `logical` data type here,
by converting this column with the `as.logical()` function,
which will turn 0's into `FALSE` and everything else, including 1, to `TRUE`:

```{r}
as.logical(cats$likes_string)
```

If you think `1`/`0` could be more useful than `TRUE`/`FALSE` because it's easier
to count the number of cases something is true or false, consider:

```{r}
TRUE + TRUE
```

So, logicals can be used as if they were numbers,
in which case `FALSE` represents 0 and `TRUE` represents 1.

```{r, include=FALSE, echo=FALSE}
file.remove("feline-data.csv")
file.remove("feline-data_v2.csv")
```

<hr style="height:1pt; visibility:hidden;" />

### A few other data structures in R

We did not go into details about R's other data structures,
which are less common than vectors and data frames.
Two that are worth mentioning briefly, though, are:

- **Matrix**, which can be convenient when you have tabular data that is exclusively
  numeric (excluding names/labels).

- **List**, which is more flexible (and complicated) than vectors:
  it can contain multiple data types, and can also be hierarchically structured.
