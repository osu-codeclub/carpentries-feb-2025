[
  {
    "objectID": "0_setup.html",
    "href": "0_setup.html",
    "title": "Install and set up R and RStudio",
    "section": "",
    "text": "Before the workshop starts, you’ll need to install R (the programming language), RStudio (the editor/IDE we’ll use to interact with R), and if you can, two R packages.\nThe instructions to do so follow below."
  },
  {
    "objectID": "0_setup.html#install-r-and-rstudio",
    "href": "0_setup.html#install-r-and-rstudio",
    "title": "Install and set up R and RStudio",
    "section": "1 Install R and RStudio",
    "text": "1 Install R and RStudio\nThere’s a separate tab with instructions for each operating system:\n\nWindowsMacOSLinux\n\n\nInstallation on Windows:\n\nInstall R: download and run this .exe file from CRAN.\nInstall RStudio: Click the download button below “Install RStudio” on this page.\n\n\n\n\n\n\n\nInstall as administrator if possible\n\n\n\nNote that if you have separate user and admin accounts, you should run the installers as administrator (right-click on the .exe file and select “Run as administrator” instead of double-clicking). Otherwise problems may occur later, for example when installing R packages.\n\n\nThe video below walks you through this process:\n\n\n\nInstallation on MacOS:\n\nInstall R: download and run this .pkg file from CRAN.\nInstall RStudio: Click the download button below “Install RStudio” on this page.\n\nThe video below walks you through this process:\n\n\n\nInstallation on Linux:\n\nInstall R: Instructions for R installation on various Linux platforms (Debian, Fedora, Redhat, and Ubuntu) can be found at https://cran.r-project.org/bin/linux/.\nInstall RStudio: Click the download button below “Install RStudio” on this page."
  },
  {
    "objectID": "0_setup.html#install-two-r-packages",
    "href": "0_setup.html#install-two-r-packages",
    "title": "Install and set up R and RStudio",
    "section": "2 Install two R packages",
    "text": "2 Install two R packages\nIf you are comfortable doing so, please install two so-called R packages (basically, add-ons to the functionality of the language) that we will be using during the workshop, which you do as follows:\n\nOpen RStudio on your computer\nIn RStudio, find the R “Console”: this is the primary tab in the (bottom) left pane\nType or paste the following commands in the Console, pressing Enter (Return) after each:\n\ninstall.packages(\"gapminder\")\ninstall.packages(\"tidyverse\")\n\nYou should see lots of text stream by in the Console while the installation is going on. When it’s done, test that the packages were successfully installed by running:\n\nlibrary(gapminder)\nlibrary(tidyverse)\n\nThe first command should produce no output, but the second should, similar to what’s shown in this screenshot:"
  },
  {
    "objectID": "3_dplyr.html#introduction",
    "href": "3_dplyr.html#introduction",
    "title": "Data frame manipulation with dplyr",
    "section": "1 Introduction",
    "text": "1 Introduction\n\n1.1 The dplyr package and the tidyverse\nThe dplyr package provides a number of very useful functions for manipulating data frames.\nIn this session, we’ll cover some of the most commonly used functions:\n\nselect() to pick columns (variables)\nfilter() to pick rows (observations)\nrename() to change column names\narrange() to change the order of rows (i.e., to sort a data frame)\nmutate() to modify values in columns and create new columns\nsummarize() to compute across-row summaries\n\nAll these functions take a data frame as the input, and output a new, modified data frame.\ndplyr belongs to a family of R packages designed for “dataframe-centric” data science called the “tidyverse”. The other tidyverse package we’ll cover in today’s workshop is ggplot2 for making plots.\n\n\n\n1.2 Loading the tidyverse\nAll core tidyverse packages can be installed and loaded with a single command. Since you should already have installed the tidyverse1, you only need to load it, which you do as follows:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nThe output tells you which packages have been loaded as part of the tidyverse.\n\n\n\n\n\n\nLearn more: Function name “conflicts” (Click to expand)\n\n\n\n\n\nAlso printed above is a “Conflicts” section that may seem ominous. What this means is that two tidyverse functions, filter() and lag(), have the same names as two functions from the stats package that were already in your R environment.\n(Those stats package functions are part of what is often referred to as “base R”: core R functionality that is always available (loaded) when you start R.)\nDue to this function name conflict/collision, for example, the filter() function from dplyr “masks” the filter() function from stats: that is, if you write a command with filter(), it will use the dplyr function and not the stats function.\nYou can still use a “masked” function, but you will need to preface it with its package name as follows: stats::filter().\n\n\n\n\n\n\n1.3 The gapminder data set\nIn this session and the next one on data visualization, we will work with the gapminder data set. This data set is available in a package of the same name (while most packages are built around functions so as to extend R’s functionality, others merely contain data sets).\nThis package, too, you should have already installed2, so you only need to load it right now:\n\nlibrary(gapminder)\n\nLet’s take a look at the dataset:\n\ngapminder\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\nWe can also use the View() function to look at the data frame — this will open a new tab in our editor pane with a spreadsheet-like look and feel:\n\nView(gapminder)\n# (Should display the dataset in an editor pane tab)\n\nThe gapminder data frame is a so-called “tibble”, which is the tidyverse variant of a data frame. The main difference is the nicer default printing behavior of tibbles: e.g. the data types of columns are shown, and only a limited number of rows are printed.\nAs for the dataset itself, note that each row contains some data for a single country in a specific year (across 5-year intervals between 1952 and 2007), with the following columns:\n\ncountry (stored as a factor)\ncontinent (stored as a factor)\nyear (stored as an integer)\nlifeExp (stored as an integer): the life expectancy in years\npop (stored as an integer): the population size\ngdpPercap (stored as a double): the per-capita GDP"
  },
  {
    "objectID": "3_dplyr.html#select-to-pick-columns-variables",
    "href": "3_dplyr.html#select-to-pick-columns-variables",
    "title": "Data frame manipulation with dplyr",
    "section": "2 select() to pick columns (variables)",
    "text": "2 select() to pick columns (variables)\nTo subset a data frame by keeping or removing certain columns, we can use the select() function.\nBy default, this function will only keep the columns that you specify, which you typically do simply by listing those columns by name:\n\nselect(.data = gapminder, year, country, gdpPercap)\n\n# A tibble: 1,704 × 3\n    year country     gdpPercap\n   &lt;int&gt; &lt;fct&gt;           &lt;dbl&gt;\n 1  1952 Afghanistan      779.\n 2  1957 Afghanistan      821.\n 3  1962 Afghanistan      853.\n 4  1967 Afghanistan      836.\n 5  1972 Afghanistan      740.\n 6  1977 Afghanistan      786.\n 7  1982 Afghanistan      978.\n 8  1987 Afghanistan      852.\n 9  1992 Afghanistan      649.\n10  1997 Afghanistan      635.\n# ℹ 1,694 more rows\n\n\nIn the command above, the first argument was the data frame, whereas the other arguments were the (unquoted!) names of columns we wanted to keep.\nThe order of the columns in the output data frame is exactly as you list them in select(), and doesn’t need to be the same as in the input data frame. In other words, select() is also one way to reorder columns. In the example above, we made year appear before country, for example.\nWe can also specify columns that should be removed, by prefacing their name with a ! (or a -):\n\nselect(.data = gapminder, !continent)\n\n# A tibble: 1,704 × 5\n   country      year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan  1952    28.8  8425333      779.\n 2 Afghanistan  1957    30.3  9240934      821.\n 3 Afghanistan  1962    32.0 10267083      853.\n 4 Afghanistan  1967    34.0 11537966      836.\n 5 Afghanistan  1972    36.1 13079460      740.\n 6 Afghanistan  1977    38.4 14880372      786.\n 7 Afghanistan  1982    39.9 12881816      978.\n 8 Afghanistan  1987    40.8 13867957      852.\n 9 Afghanistan  1992    41.7 16317921      649.\n10 Afghanistan  1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\n\n\n\n\n\n\n\nThere are also ways to e.g. select ranges of columns, but that is beyond the scope of this short workshop. Check the select() help by typing ?select to learn more."
  },
  {
    "objectID": "3_dplyr.html#rename-to-change-column-names",
    "href": "3_dplyr.html#rename-to-change-column-names",
    "title": "Data frame manipulation with dplyr",
    "section": "3 rename() to change column names",
    "text": "3 rename() to change column names\nThe next dplyr function is one of the simplest: rename() to change column names.\nThe syntax to specify the new and old name within the function is new_name = old_name — for example, we may want to rename the gdpPercap column:\n\nrename(.data = gapminder, gdp_per_capita = gdpPercap)\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdp_per_capita\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;          &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333           779.\n 2 Afghanistan Asia       1957    30.3  9240934           821.\n 3 Afghanistan Asia       1962    32.0 10267083           853.\n 4 Afghanistan Asia       1967    34.0 11537966           836.\n 5 Afghanistan Asia       1972    36.1 13079460           740.\n 6 Afghanistan Asia       1977    38.4 14880372           786.\n 7 Afghanistan Asia       1982    39.9 12881816           978.\n 8 Afghanistan Asia       1987    40.8 13867957           852.\n 9 Afghanistan Asia       1992    41.7 16317921           649.\n10 Afghanistan Asia       1997    41.8 22227415           635.\n# ℹ 1,694 more rows\n\n\nWe can also rename multiple columns at once:\n\nrename(.data = gapminder, gdp_per_capita = gdpPercap, life_exp = lifeExp)\n\n# A tibble: 1,704 × 6\n   country     continent  year life_exp      pop gdp_per_capita\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;    &lt;dbl&gt;    &lt;int&gt;          &lt;dbl&gt;\n 1 Afghanistan Asia       1952     28.8  8425333           779.\n 2 Afghanistan Asia       1957     30.3  9240934           821.\n 3 Afghanistan Asia       1962     32.0 10267083           853.\n 4 Afghanistan Asia       1967     34.0 11537966           836.\n 5 Afghanistan Asia       1972     36.1 13079460           740.\n 6 Afghanistan Asia       1977     38.4 14880372           786.\n 7 Afghanistan Asia       1982     39.9 12881816           978.\n 8 Afghanistan Asia       1987     40.8 13867957           852.\n 9 Afghanistan Asia       1992     41.7 16317921           649.\n10 Afghanistan Asia       1997     41.8 22227415           635.\n# ℹ 1,694 more rows"
  },
  {
    "objectID": "3_dplyr.html#the-pipe",
    "href": "3_dplyr.html#the-pipe",
    "title": "Data frame manipulation with dplyr",
    "section": "4 The pipe (|>)",
    "text": "4 The pipe (|&gt;)\nSo far, our examples applied a single dplyr function to a data frame, and simply printed the output (a new data frame) to screen.\nBut in practice, it is common to use several functions in succession to “wrangle” a dataframe into the format we want. For example, if we want to first select() one or more columns, and then modify the output further by rename()-ing a column, we could:\n\ngapminder_sel &lt;- select(.data = gapminder, year, country, gdpPercap)\n\nrename(.data = gapminder_sel, gdp_per_capita = gdpPercap)\n\n# A tibble: 1,704 × 3\n    year country     gdp_per_capita\n   &lt;int&gt; &lt;fct&gt;                &lt;dbl&gt;\n 1  1952 Afghanistan           779.\n 2  1957 Afghanistan           821.\n 3  1962 Afghanistan           853.\n 4  1967 Afghanistan           836.\n 5  1972 Afghanistan           740.\n 6  1977 Afghanistan           786.\n 7  1982 Afghanistan           978.\n 8  1987 Afghanistan           852.\n 9  1992 Afghanistan           649.\n10  1997 Afghanistan           635.\n# ℹ 1,694 more rows\n\n\nFor more elaborate editing, we could go on like we did above, successively assigning new data frames and moving on to the next step.\nBut there is a nicer way of dong this, using so-called “piping” with a pipe operator (|&gt;). Let’s start by seeing a reformulation of the code above with pipes:\n\ngapminder |&gt;\n  select(year, country, gdpPercap) |&gt;\n  rename(gdp_per_capita = gdpPercap)\n\n# A tibble: 1,704 × 3\n    year country     gdp_per_capita\n   &lt;int&gt; &lt;fct&gt;                &lt;dbl&gt;\n 1  1952 Afghanistan           779.\n 2  1957 Afghanistan           821.\n 3  1962 Afghanistan           853.\n 4  1967 Afghanistan           836.\n 5  1972 Afghanistan           740.\n 6  1977 Afghanistan           786.\n 7  1982 Afghanistan           978.\n 8  1987 Afghanistan           852.\n 9  1992 Afghanistan           649.\n10  1997 Afghanistan           635.\n# ℹ 1,694 more rows\n\n\nWhat happened here is that we took the gapminder data frame, pushed (or “piped”) it into the select() function, whose output was in turn piped into the rename() function.\nYou can think of the pipe as “then”: take gapminder, then select, then rename. Using pipes is slightly less typing and considerably more readable than using successive assignments like we did before.3\nWhen using pipes, we no longer specify the input data frame with the .data argument, because the input is “already” being piped into the function (by default, the input goes to the function’s first argument).\n\n\n\n\n\n\nFor code readability, it is good practice to always start a new line after a pipe |&gt;"
  },
  {
    "objectID": "3_dplyr.html#filter-to-pick-rows-observations",
    "href": "3_dplyr.html#filter-to-pick-rows-observations",
    "title": "Data frame manipulation with dplyr",
    "section": "5 filter() to pick rows (observations)",
    "text": "5 filter() to pick rows (observations)\nThe filter() function keeps only those rows that satisfy one or more conditions. It is similar to Filter functionality in spreadsheets — except that those only change what you display, while filter() will remove rows. But if that sounds scary, recall what we mentioned earlier:\n\nAll these functions take a data frame as the input, and output a new, modified data frame.\n\n\n\n\n\n\n\nTherefore, you would only modify existing data if you would assign the output back to the input object, like in the example below with the select() function:\n\ncats &lt;- cats |&gt; select(name, coat)\n\n\n\n\nLet’s start with the following example, where we want to keep observations (remember, these are countries in a given year) with a life expectancy exceeding 80 years:\n\ngapminder |&gt;\n  filter(lifeExp &gt; 80)\n\n# A tibble: 21 × 6\n   country          continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;            &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Australia        Oceania    2002    80.4 19546792    30688.\n 2 Australia        Oceania    2007    81.2 20434176    34435.\n 3 Canada           Americas   2007    80.7 33390141    36319.\n 4 France           Europe     2007    80.7 61083916    30470.\n 5 Hong Kong, China Asia       2002    81.5  6762476    30209.\n 6 Hong Kong, China Asia       2007    82.2  6980412    39725.\n 7 Iceland          Europe     2002    80.5   288030    31163.\n 8 Iceland          Europe     2007    81.8   301931    36181.\n 9 Israel           Asia       2007    80.7  6426679    25523.\n10 Italy            Europe     2002    80.2 57926999    27968.\n# ℹ 11 more rows\n\n\nSo, we specify a condition based on the values in at least one column to only keep rows satisfying this condition.\nThese conditions don’t have to be based on numeric comparisons – for example:\n\ngapminder |&gt;\n  filter(continent == \"Europe\")\n\n# A tibble: 360 × 6\n   country continent  year lifeExp     pop gdpPercap\n   &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt;     &lt;dbl&gt;\n 1 Albania Europe     1952    55.2 1282697     1601.\n 2 Albania Europe     1957    59.3 1476505     1942.\n 3 Albania Europe     1962    64.8 1728137     2313.\n 4 Albania Europe     1967    66.2 1984060     2760.\n 5 Albania Europe     1972    67.7 2263554     3313.\n 6 Albania Europe     1977    68.9 2509048     3533.\n 7 Albania Europe     1982    70.4 2780097     3631.\n 8 Albania Europe     1987    72   3075321     3739.\n 9 Albania Europe     1992    71.6 3326498     2497.\n10 Albania Europe     1997    73.0 3428038     3193.\n# ℹ 350 more rows\n\n\n\n\n\n\n\n\nRemember to use two equals signs == to test for equality!\n\n\n\n\n\n\n\n\nFilter based on multiple conditions\nIt’s also possible to filter based on multiple conditions – for example:\n\ngapminder |&gt;\n  filter(continent == \"Asia\", year == 2007, lifeExp &gt; 80)\n\n# A tibble: 3 × 6\n  country          continent  year lifeExp       pop gdpPercap\n  &lt;fct&gt;            &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n1 Hong Kong, China Asia       2007    82.2   6980412    39725.\n2 Israel           Asia       2007    80.7   6426679    25523.\n3 Japan            Asia       2007    82.6 127467972    31656.\n\n\nBy default, multiple conditions are combined in an AND fashion — in other words, in a given row, each condition needs to be met for that column to be kept.\nIf you want to combine conditions in an OR fashion, you should use a | as follows:\n\ngapminder |&gt;\n  filter(lifeExp &gt; 80 | gdpPercap &gt; 10000)\n\n# A tibble: 392 × 6\n   country   continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;     &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Argentina Americas   1977    68.5 26983828    10079.\n 2 Argentina Americas   1997    73.3 36203463    10967.\n 3 Argentina Americas   2007    75.3 40301927    12779.\n 4 Australia Oceania    1952    69.1  8691212    10040.\n 5 Australia Oceania    1957    70.3  9712569    10950.\n 6 Australia Oceania    1962    70.9 10794968    12217.\n 7 Australia Oceania    1967    71.1 11872264    14526.\n 8 Australia Oceania    1972    71.9 13177000    16789.\n 9 Australia Oceania    1977    73.5 14074100    18334.\n10 Australia Oceania    1982    74.7 15184200    19477.\n# ℹ 382 more rows\n\n\n\n\n\nPipeline practice\nFinally, let’s practice a bit more with “pipelines” that use multiple dplyr verbs:\n\ngapminder |&gt;\n  filter(continent == \"Americas\") |&gt;\n  select(year, country, gdpPercap) |&gt;\n  rename(gdp_per_capita = gdpPercap)\n\n# A tibble: 300 × 3\n    year country   gdp_per_capita\n   &lt;int&gt; &lt;fct&gt;              &lt;dbl&gt;\n 1  1952 Argentina          5911.\n 2  1957 Argentina          6857.\n 3  1962 Argentina          7133.\n 4  1967 Argentina          8053.\n 5  1972 Argentina          9443.\n 6  1977 Argentina         10079.\n 7  1982 Argentina          8998.\n 8  1987 Argentina          9140.\n 9  1992 Argentina          9308.\n10  1997 Argentina         10967.\n# ℹ 290 more rows\n\n\n\n\n\n Challenge 1\nWrite a single command (which can span multiple lines and include pipes) that will produce a data frame that has lifeExp, country, and year for Africa but not for other continents. How many rows does your data frame have?\n\n\nClick for the solution\n\n\ngapminder |&gt;\n  filter(continent == \"Africa\") |&gt;\n  select(year, country, lifeExp)\n\n# A tibble: 624 × 3\n    year country lifeExp\n   &lt;int&gt; &lt;fct&gt;     &lt;dbl&gt;\n 1  1952 Algeria    43.1\n 2  1957 Algeria    45.7\n 3  1962 Algeria    48.3\n 4  1967 Algeria    51.4\n 5  1972 Algeria    54.5\n 6  1977 Algeria    58.0\n 7  1982 Algeria    61.4\n 8  1987 Algeria    65.8\n 9  1992 Algeria    67.7\n10  1997 Algeria    69.2\n# ℹ 614 more rows\n\n\nIt has 624 rows."
  },
  {
    "objectID": "3_dplyr.html#arrange-to-sort-data-frames",
    "href": "3_dplyr.html#arrange-to-sort-data-frames",
    "title": "Data frame manipulation with dplyr",
    "section": "6 arrange() to sort data frames",
    "text": "6 arrange() to sort data frames\nThe arrange() function is like sorting functionality in Excel: it changes the order of rows based on the values in one or more columns.\nFor example, gapminder is currently sorted alphabetically by country and then by year, but we may instead want to sort by population size:\n\ngapminder |&gt;\n  arrange(pop)\n\n# A tibble: 1,704 × 6\n   country               continent  year lifeExp   pop gdpPercap\n   &lt;fct&gt;                 &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt; &lt;int&gt;     &lt;dbl&gt;\n 1 Sao Tome and Principe Africa     1952    46.5 60011      880.\n 2 Sao Tome and Principe Africa     1957    48.9 61325      861.\n 3 Djibouti              Africa     1952    34.8 63149     2670.\n 4 Sao Tome and Principe Africa     1962    51.9 65345     1072.\n 5 Sao Tome and Principe Africa     1967    54.4 70787     1385.\n 6 Djibouti              Africa     1957    37.3 71851     2865.\n 7 Sao Tome and Principe Africa     1972    56.5 76595     1533.\n 8 Sao Tome and Principe Africa     1977    58.6 86796     1738.\n 9 Djibouti              Africa     1962    39.7 89898     3021.\n10 Sao Tome and Principe Africa     1982    60.4 98593     1890.\n# ℹ 1,694 more rows\n\n\nSorting can be useful to see the observations with the smallest or largest values for a certain column: above we see that the country and year with the smallest population size is Sao Tome and Principe in 1952.\nDefault sorting is from small to large, but of course, we may also want to sort in the reverse order. You can do this using the desc() (descending, large-to-small) helper function:\n\ngapminder |&gt;\n  arrange(desc(pop))\n\n# A tibble: 1,704 × 6\n   country continent  year lifeExp        pop gdpPercap\n   &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;      &lt;int&gt;     &lt;dbl&gt;\n 1 China   Asia       2007    73.0 1318683096     4959.\n 2 China   Asia       2002    72.0 1280400000     3119.\n 3 China   Asia       1997    70.4 1230075000     2289.\n 4 China   Asia       1992    68.7 1164970000     1656.\n 5 India   Asia       2007    64.7 1110396331     2452.\n 6 China   Asia       1987    67.3 1084035000     1379.\n 7 India   Asia       2002    62.9 1034172547     1747.\n 8 China   Asia       1982    65.5 1000281000      962.\n 9 India   Asia       1997    61.8  959000000     1459.\n10 China   Asia       1977    64.0  943455000      741.\n# ℹ 1,694 more rows\n\n\nFinally, it is common to want to sort by multiple columns, where ties in the first column are broken by a second column (and so on) – to do so, simply list the columns in the appropriate order:\n\ngapminder |&gt;\n  arrange(continent, country)\n\n# A tibble: 1,704 × 6\n   country continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Algeria Africa     1952    43.1  9279525     2449.\n 2 Algeria Africa     1957    45.7 10270856     3014.\n 3 Algeria Africa     1962    48.3 11000948     2551.\n 4 Algeria Africa     1967    51.4 12760499     3247.\n 5 Algeria Africa     1972    54.5 14760787     4183.\n 6 Algeria Africa     1977    58.0 17152804     4910.\n 7 Algeria Africa     1982    61.4 20033753     5745.\n 8 Algeria Africa     1987    65.8 23254956     5681.\n 9 Algeria Africa     1992    67.7 26298373     5023.\n10 Algeria Africa     1997    69.2 29072015     4797.\n# ℹ 1,694 more rows\n\n\nThe above example sorts first by continent and then by country."
  },
  {
    "objectID": "3_dplyr.html#mutate-to-modify-values-in-columns-and-create-new-columns",
    "href": "3_dplyr.html#mutate-to-modify-values-in-columns-and-create-new-columns",
    "title": "Data frame manipulation with dplyr",
    "section": "7 mutate() to modify values in columns and create new columns",
    "text": "7 mutate() to modify values in columns and create new columns\nSo far, we’ve focused on functions that “merely” subset and reorganize data frames. We’ve also seen how we can modify column names. But we haven’t seen how we can change the data or compute derived data in data frames.\nWe can do this with the mutate() function. For example, say that we want to create a new column that has population sizes in millions rather than in individuals:\n\ngapminder |&gt;\n  mutate(pop_million = pop / 10^6)\n\n# A tibble: 1,704 × 7\n   country     continent  year lifeExp      pop gdpPercap pop_million\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.        8.43\n 2 Afghanistan Asia       1957    30.3  9240934      821.        9.24\n 3 Afghanistan Asia       1962    32.0 10267083      853.       10.3 \n 4 Afghanistan Asia       1967    34.0 11537966      836.       11.5 \n 5 Afghanistan Asia       1972    36.1 13079460      740.       13.1 \n 6 Afghanistan Asia       1977    38.4 14880372      786.       14.9 \n 7 Afghanistan Asia       1982    39.9 12881816      978.       12.9 \n 8 Afghanistan Asia       1987    40.8 13867957      852.       13.9 \n 9 Afghanistan Asia       1992    41.7 16317921      649.       16.3 \n10 Afghanistan Asia       1997    41.8 22227415      635.       22.2 \n# ℹ 1,694 more rows\n\n\nThe code above created a new column called pop_million that is the result of dividing the values in the pop column by a million.\nTo modify a column rather than adding a new one, simply “assign back to the same name”:\n\ngapminder |&gt;\n  mutate(pop = pop / 10^6)\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp   pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8.43      779.\n 2 Afghanistan Asia       1957    30.3  9.24      821.\n 3 Afghanistan Asia       1962    32.0 10.3       853.\n 4 Afghanistan Asia       1967    34.0 11.5       836.\n 5 Afghanistan Asia       1972    36.1 13.1       740.\n 6 Afghanistan Asia       1977    38.4 14.9       786.\n 7 Afghanistan Asia       1982    39.9 12.9       978.\n 8 Afghanistan Asia       1987    40.8 13.9       852.\n 9 Afghanistan Asia       1992    41.7 16.3       649.\n10 Afghanistan Asia       1997    41.8 22.2       635.\n# ℹ 1,694 more rows\n\n\n\n\n Challenge 2\nA: Use mutate() to create a new column called gdp_billion that has the absolute GDP (i.e., not relative to population size) in units of billions.\n\n\nClick for the solution\n\n\ngapminder |&gt;\n    mutate(gdp_billion = gdpPercap * pop / 10^9)\n\n# A tibble: 1,704 × 7\n   country     continent  year lifeExp      pop gdpPercap gdp_billion\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.        6.57\n 2 Afghanistan Asia       1957    30.3  9240934      821.        7.59\n 3 Afghanistan Asia       1962    32.0 10267083      853.        8.76\n 4 Afghanistan Asia       1967    34.0 11537966      836.        9.65\n 5 Afghanistan Asia       1972    36.1 13079460      740.        9.68\n 6 Afghanistan Asia       1977    38.4 14880372      786.       11.7 \n 7 Afghanistan Asia       1982    39.9 12881816      978.       12.6 \n 8 Afghanistan Asia       1987    40.8 13867957      852.       11.8 \n 9 Afghanistan Asia       1992    41.7 16317921      649.       10.6 \n10 Afghanistan Asia       1997    41.8 22227415      635.       14.1 \n# ℹ 1,694 more rows\n\n\n\nB: (Bonus) Use mutate() to create a new column planet that has the value earth in every row. We didn’t cover this kind of scenario, but go ahead and test your intuition!\n\n\nClick for the solution\n\nIf you simply provide a value, this will be repeated in every row:\n\ngapminder |&gt;\n  mutate(planet = \"earth\")\n\n# A tibble: 1,704 × 7\n   country     continent  year lifeExp      pop gdpPercap planet\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt; \n 1 Afghanistan Asia       1952    28.8  8425333      779. earth \n 2 Afghanistan Asia       1957    30.3  9240934      821. earth \n 3 Afghanistan Asia       1962    32.0 10267083      853. earth \n 4 Afghanistan Asia       1967    34.0 11537966      836. earth \n 5 Afghanistan Asia       1972    36.1 13079460      740. earth \n 6 Afghanistan Asia       1977    38.4 14880372      786. earth \n 7 Afghanistan Asia       1982    39.9 12881816      978. earth \n 8 Afghanistan Asia       1987    40.8 13867957      852. earth \n 9 Afghanistan Asia       1992    41.7 16317921      649. earth \n10 Afghanistan Asia       1997    41.8 22227415      635. earth \n# ℹ 1,694 more rows"
  },
  {
    "objectID": "3_dplyr.html#summarize-to-compute-groupwise-summary-stats",
    "href": "3_dplyr.html#summarize-to-compute-groupwise-summary-stats",
    "title": "Data frame manipulation with dplyr",
    "section": "8 summarize() to compute (groupwise) summary stats",
    "text": "8 summarize() to compute (groupwise) summary stats\nIn combination with group_by(), the summarize() function can compute data summaries across groups of rows of a data frame.\nFirst, let’s see what summarize() does when used by itself:\n\ngapminder |&gt;\n  summarize(mean_gdpPercap = mean(gdpPercap),\n            mean_lifeExp = mean(lifeExp))\n\n# A tibble: 1 × 2\n  mean_gdpPercap mean_lifeExp\n           &lt;dbl&gt;        &lt;dbl&gt;\n1          7215.         59.5\n\n\nAbove, we computed the mean for two columns, across all rows. This is already useful, but in combination with the helper function group_by(), summarize() becomes really powerful by allowing us to compute groupwise stats.\nFor example, let’s compute the mean GDP and mean life expectancy separately for each continent:\n\ngapminder |&gt;\n  group_by(continent) |&gt;\n  summarize(mean_gdpPercap = mean(gdpPercap),\n            mean_lifeExp = mean(lifeExp))\n\n# A tibble: 5 × 3\n  continent mean_gdpPercap mean_lifeExp\n  &lt;fct&gt;              &lt;dbl&gt;        &lt;dbl&gt;\n1 Africa             2194.         48.9\n2 Americas           7136.         64.7\n3 Asia               7902.         60.1\n4 Europe            14469.         71.9\n5 Oceania           18622.         74.3\n\n\ngroup_by() implicitly splits a data frame into groups of rows: here, one group for observations from each continent. After that, operations like in summarize() will happen separately for each group, which is how we ended up with per-continent means.\nFinally, another powerful feature is that we can group by multiple variables – for example, by year and continent:\n\ngapminder |&gt;\n  group_by(continent, year) |&gt;\n  summarize(mean_gdpPercap = mean(gdpPercap),\n            mean_lifeExp = mean(lifeExp))\n\n`summarise()` has grouped output by 'continent'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 60 × 4\n# Groups:   continent [5]\n   continent  year mean_gdpPercap mean_lifeExp\n   &lt;fct&gt;     &lt;int&gt;          &lt;dbl&gt;        &lt;dbl&gt;\n 1 Africa     1952          1253.         39.1\n 2 Africa     1957          1385.         41.3\n 3 Africa     1962          1598.         43.3\n 4 Africa     1967          2050.         45.3\n 5 Africa     1972          2340.         47.5\n 6 Africa     1977          2586.         49.6\n 7 Africa     1982          2482.         51.6\n 8 Africa     1987          2283.         53.3\n 9 Africa     1992          2282.         53.6\n10 Africa     1997          2379.         53.6\n# ℹ 50 more rows\n\n\n\n\n Challenge 3\nCalculate the average life expectancy per country. Which has the longest average life expectancy and which has the shortest average life expectancy?\n\n\nClick for the solution\n\nFirst, let’s create a dataframe with the mean life expectancy by country:\n\nlifeExp_bycountry &lt;- gapminder |&gt;\n   group_by(country) |&gt;\n   summarize(mean_lifeExp = mean(lifeExp))\n\nThen, arrange that dataframe in two directions to see the countries with the longest and shortest life expectance – piping into head() as a bonus to only see the top n, here top 1:\n\nlifeExp_bycountry |&gt;\n   arrange(mean_lifeExp) |&gt;\n   head(n = 1)\n\n# A tibble: 1 × 2\n  country      mean_lifeExp\n  &lt;fct&gt;               &lt;dbl&gt;\n1 Sierra Leone         36.8\n\nlifeExp_bycountry |&gt;\n   arrange(desc(mean_lifeExp)) |&gt;\n   head(n = 1)\n\n# A tibble: 1 × 2\n  country mean_lifeExp\n  &lt;fct&gt;          &lt;dbl&gt;\n1 Iceland         76.5"
  },
  {
    "objectID": "3_dplyr.html#bonus-material-for-self-study",
    "href": "3_dplyr.html#bonus-material-for-self-study",
    "title": "Data frame manipulation with dplyr",
    "section": "9 Bonus material for self-study",
    "text": "9 Bonus material for self-study\n\n9.1 Writing and reading tabular data to and from files\nWhen working with your own data in R, it is common to want to read data from files into your R environment, and write data that is in your R environment to files.\nWhile it’s possible to have R interact with Excel spreadsheet files4, keeping your data in plain-text files generally benefits reproducibility. Tabular plain text files can be stored using:\n\nA Tab as the column delimiter (often called TSV files, and stored with a .tsv extension)\nA comma as the column delimiter (often called CSV files, and stored with a .csv extension).\n\nWe will use functions from the readr package, which is part of the core tidyverse and therefore already loaded into your environment, to practice writing and reading data to and from TSV files.\n\nWriting files\nFirst, let’s write the gapminder data frame to file using the write_tsv() function with arguments x for the R object and file for the file path:\n\nwrite_tsv(x = gapminder, file = \"gapminder.tsv\")\n\nThis will have written to a file called gapminder.tsv in your R working directory (you can see where that is at the top of the Console, or by running getwd()).\n\n\n\n\n\n\nChecking out the file\n\n\n\nIn RStudio’s Files pane, find your new file and click on it. That way, the file will open in the editor.\n\n\n\n\n\n\n\n\nWant to write to a different folder on your computer? (Click to expand)\n\n\n\n\n\nThe file argument to write_tsv() takes a file path, meaning that you can specify any location on your computer for it it in addition to its name.\nFor example, if you had a folder called results in your current working directory (directory is just another word for folder), you could put the file in there:\n\nwrite_tsv(x = gapminder, file = \"results/gapminder.tsv\")\n\nNote that a forward slash / as a folder delimiter will work regardless of your operating system (even though Windows natively delimits folder by a backslash \\).\nFinally, if you want to store the file in a totally different place than where you are now, note that you can also use so-called absolute (or “full”) paths like:\n\nwrite_tsv(x = gapminder, file = \"/Users/poelstra.1/Desktop/gapminder.tsv\")\n\n\n\n\n\n\n\nReading from files\nTo practice reading data from a file, we’ll use the read_tsv() function on the file we just created:\n\ngapminder_reread &lt;- read_tsv(file = \"gapminder.tsv\")\n\nRows: 1704 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (2): country, continent\ndbl (4): year, lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNote that the function is rather chatty by default, telling us how many rows and columns it read in, and what their data types are. Let’s check the resulting object:\n\ngapminder_reread\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\nThis looks good! Do note that the column’s data types are not identical to what they were (year and pop are saved as double rather than integer, and country and continent as character rather than factor). This is largely expected because that kind of metadata is not stored in a plain-text TSV, so read_tsv() will by default simply make best guesses as to the types.\nAlternatively, we could tell read_tsv what the column types should be using abbreviations (f for factor, i for integer, d for double — run ?read_tsv for more info):\n\nread_tsv(file = \"gapminder.tsv\", col_types = \"ffidi\")\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\n\n\n\n\n\n\nTo read and write CSV files instead, use read_csv() / write_csv() in the same way.\n\n\n\n\n\n\n\n9.2 count() and n()\nA common operation is to count the number of observations for each group. The dplyr package comes with two related functions that help with this.\nFor instance, if we wanted to check the number of countries included in the dataset for the year 2002, we can use the count() function. It takes the name of one or more columns that contain the groups we are interested in, and we can optionally sort the results in descending order by adding sort = TRUE:\n\ngapminder |&gt;\n    filter(year == 2002) |&gt;\n    count(continent, sort = TRUE)\n\n# A tibble: 5 × 2\n  continent     n\n  &lt;fct&gt;     &lt;int&gt;\n1 Africa       52\n2 Asia         33\n3 Europe       30\n4 Americas     25\n5 Oceania       2\n\n\nIf we need to use the number of observations in calculations like by summarize(), the n() function is useful. It will return the total number of observations in the “current group” as applicable — for instance, if we wanted to get the standard error of the life expectancy per continent:\n\ngapminder |&gt;\n  group_by(continent) |&gt;\n  summarize(se_life = sd(lifeExp) / sqrt(n()))\n\n# A tibble: 5 × 2\n  continent se_life\n  &lt;fct&gt;       &lt;dbl&gt;\n1 Africa      0.366\n2 Americas    0.540\n3 Asia        0.596\n4 Europe      0.286\n5 Oceania     0.775\n\n\n\n\n\n9.3 Learn more\nThis material was adapted from this Carpentries lesson episode.\nIn your journey to become a skilled data frame wrangler in R, here are some additional topics that are very useful but beyond the scope of this workshop:\n\nJoining/merging – combining multiple dataframes based on one or more shared columns. This can be done with dplyr’s join_*() functions.\nPivoting/reshaping – moving between ‘wide’ and ‘long’ data formats with pivot_wider() and pivot_longer() – this is covered in episode 13 of our focal Carpentries lesson."
  },
  {
    "objectID": "3_dplyr.html#footnotes",
    "href": "3_dplyr.html#footnotes",
    "title": "Data frame manipulation with dplyr",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n If not: run install.packages(\"tidyverse\") now.↩︎\n If not: run install.packages(\"gapminder\") now.↩︎\n Using pipes is also faster and uses less computer memory.↩︎\n Using the readxl package. This is installed as part of the tidyverse but is not a core tidyverse package and therefore needs to be loaded separately.↩︎"
  },
  {
    "objectID": "4_ggplot.html",
    "href": "4_ggplot.html",
    "title": "Creating publication quality graphics with ggplot2",
    "section": "",
    "text": "In this episode, we will learn about how to create publication-quality graphics in R using the tidyverse package ggplot2. Plotting data is a very quick and easy way to understand the relationship between your variables."
  },
  {
    "objectID": "4_ggplot.html#the-grammar-of-graphics",
    "href": "4_ggplot.html#the-grammar-of-graphics",
    "title": "Creating publication quality graphics with ggplot2",
    "section": "1 The grammar of graphics",
    "text": "1 The grammar of graphics\nThe package ggplot2 applies a framework for plotting such that any plot can be built from the same basic building blocks. This very popular package is based on a system called the Grammar of Graphics by Leland Wilkinson which aims to create a grammatical rules for the development of graphics. It is part of a larger group of packages called “the tidyverse.”\nThe “gg” in ggplot stands for “grammar of graphics” and all plots share a common template. This is fundamentally different than plotting using a program like Excel, where you first pick your plot type, and then you add your data. With ggplot, you start with data, add a coordinate system, and then add “geoms,” which indicate what type of plot you want. A cool thing about ggplot is that you can add and layer different geoms together, to create a fully customized plot that is exactly what you want. If this sounds nebulous right now, that’s okay, we are going to talk more about this.\nSimplified, we will provide to R:\n\nour data\naesthetics mapped to variables - what connects the data to the graphics\nlayers - determine which type of plot we are going to make, what cordinate system we will use, what scales we want, and other important aspects of our plot\n\nYou can think about a ggplot as being composed of layers. You start with your data, and continue to add layers until you get the plot that you want. This might sound a bit abstract so I am going to talk through this with an example."
  },
  {
    "objectID": "4_ggplot.html#looking-at-our-data-and-getting-set-up",
    "href": "4_ggplot.html#looking-at-our-data-and-getting-set-up",
    "title": "Creating publication quality graphics with ggplot2",
    "section": "2 Looking at our data and getting set up",
    "text": "2 Looking at our data and getting set up\nBefore we plot, let’s look at the data we will use for this session. We are going to use the same gapminder data from one hour ago.\nIn case you don’t have it up from before, let’s load both the tidyverse and gapminder using the function library() so they are active.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(gapminder)\n\nWe can use the function View() to look at our data. This opens our data sort of like how we might view it in Excel.\n\nView(gapminder)\n\nWe can also use the function str() or glimpse() to look at the structure of our data.\n\nstr(gapminder)\n\ntibble [1,704 × 6] (S3: tbl_df/tbl/data.frame)\n $ country  : Factor w/ 142 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ continent: Factor w/ 5 levels \"Africa\",\"Americas\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n $ pop      : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\n $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n\n\ngapminder is a tibble (very similar to a data frame), comprised of 1,704 rows and 6 columns. The columns are:\n\ncountry (a factor)\ncontinent (a factor)\nyear (an integer)\nlifeExp (a number)\npop (an integer)\n\nWe are going to use the function ggplot() when we want to make a ggplot.\n\n\n\n\n\n\nThe function vs the package\n\n\n\nNote, the function is called ggplot() and the package is called ggplot2.\n\n\nIf we want to learn how the function works, we can use the ? to find out more. Running the code below will open up the documentation page for the function ggplot() in the bottom right “Help” quadrant of RStudio.\n\n?ggplot()"
  },
  {
    "objectID": "4_ggplot.html#building-our-plot",
    "href": "4_ggplot.html#building-our-plot",
    "title": "Creating publication quality graphics with ggplot2",
    "section": "3 Building our plot",
    "text": "3 Building our plot\nWe can start by providing the data as the first argument to ggplot().\n\nggplot(data = gapminder)\n\n\n\n\n\n\n\n\nWe have a blank plot! We haven’t given enough information for R to know what we want to plot - we have simply told R what dataframe we will be using. We are getting the first “base” layer of the plot.\nInstead of providing the dataframe as the first argument to ggplot(), we can use the pipe |&gt; (or the old pipe %&gt;% that you might see around, which works in the exact same way) that Jelmer taught us about. This “sends” the data into the next function. I will use this syntax for the rest of the workshop.\n\ngapminder |&gt;\n  ggplot()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nggplot(data = gapminder) and gapminder |&gt; ggplot() are the same thing.\n\n\nIf we want to make a scatterplot to understand the relationship between GDP per capita (i.e., gdpPercap) and life expectancy (i.e., lifeExp), we can do so by setting x and y respectively within aes(), or our aesthetic mappings.\n\ngapminder |&gt;\n  ggplot(mapping = aes(x = gdpPercap, y = lifeExp))\n\n\n\n\n\n\n\n\nOk! We don’t have a plot, per se, but we have more than we had before. We can now see that gdpPercap is on the x-axis (along with some numbers reflecting the range of our data), and lifeExp is on the y-axis (along with some numbers reflecting the range of our data).\n\n\n\n\n\n\nNote\n\n\n\nNote that the “mapping” part is actually not necessary.\n\n\n\ngapminder |&gt;\n  ggplot(aes(x = gdpPercap, y = lifeExp))\n\n\n\n\n\n\n\n\nNow we need to tell R what geometry, or “geom” want to use. All of the “geoms” start with geom_*(), and we can see what they all are by starting to type geom and pressing tab.\nLet’s make a scatterplot here.\n\ngapminder |&gt;\n  ggplot(aes(x = gdpPercap, y = lifeExp)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n3.1 Challenge 1\nModify the plot we’ve made so that you can see the relationship between life expectancy and year.\n\n\nClick for the solution\n\nMap x = year and y = lifeExp, and use geom_point() since we want a scatterplot.\n\ngapminder |&gt;\n  ggplot(aes(x = year, y = lifeExp)) +\n  geom_point()\n\n\n\n\n\n\n\n\nNote the plot looks a little weird since each point is a country, so for every year, we have an average life expectancy for each country.\n\n\n\n\n3.2 Challenge 2\nModify to color your points by continent.\n\n\nNeed a hint?\n\nTry using the argument color within your aesthetic mappings.\n\n\n\nNeed another hint?\n\nTry setting color = continent within your aesthetic mappings.\n\n\n\nClick for the solution\n\n\ngapminder |&gt;\n  ggplot(aes(x = year, y = lifeExp, color = continent)) + \n  geom_point()\n\n\n\n\n\n\n\n\nYou can better see here that each point is actually a different country now that they are colored by continent."
  },
  {
    "objectID": "4_ggplot.html#adding-more-layers",
    "href": "4_ggplot.html#adding-more-layers",
    "title": "Creating publication quality graphics with ggplot2",
    "section": "4 Adding more layers",
    "text": "4 Adding more layers\nInstead of making a scatter plot, we might want to make a line plot. Using ggplot this is as easy as changing out your geom.\n\ngapminder |&gt;\n  ggplot(aes(x = year, y = lifeExp, color = continent)) +\n  geom_line()\n\n\n\n\n\n\n\n\nThe plot is jumping around a lot since for each year, we have life expectancy data for each country. Our plot here is not a summary of that data, but instead all of that data together, on top of itself.\nWe might want to have one line for each country, we can do this by specifying group = country within our aesthetic mappings.\n\ngapminder |&gt; \n  ggplot(aes(x = year, y = lifeExp, color = continent, group = country)) +\n  geom_line()\n\n\n\n\n\n\n\n\nA nice thing about ggplot is that you don’t actually need to decide if you want to have lines or points, you can have both!\n\ngapminder |&gt; \n  ggplot(aes(x = year, y = lifeExp, color = continent, group = country)) +\n  geom_line() +\n  geom_point()\n\n\n\n\n\n\n\n\nNow we see a point for each observation and each point and line is colored based on continent.\nYou can also set your mappings globally (within ggplot()) or locally (within a specific geom). Let’s see what the difference is. Let’s see what happens when we move color = continent into geom_point(aes(color = continent)).\n\ngapminder |&gt; \n  ggplot(aes(x = year, y = lifeExp, group = country)) +\n  geom_point(aes(color = continent)) +\n  geom_line()\n\n\n\n\n\n\n\n\nWe can see that now only the points are colored by continent, and the lines are all black (the default color for one group).\n\n\n4.1 Challenge 3\nChange the order of the point and line layers - what happens?\n\n\nClick for the solution\n\nPoints then lines (points are on the bottom)\n\ngapminder |&gt;\n  ggplot(aes(x = year, y = lifeExp, group = country)) +\n  geom_point() +\n  geom_line(aes(color = continent))\n\n\n\n\n\n\n\n\nLines then points (lines are on the bottom)\n\ngapminder |&gt;\n  ggplot(aes(x = year, y = lifeExp, group = country)) +\n  geom_line(aes(color = continent)) +\n  geom_point() \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe layers are added in the order you indicate, so if you change the order, your plot will change. You can see because geom_line() comes below geom_point(), the lines are placed on top of the points."
  },
  {
    "objectID": "4_ggplot.html#transformations-and-statistics",
    "href": "4_ggplot.html#transformations-and-statistics",
    "title": "Creating publication quality graphics with ggplot2",
    "section": "5 Transformations and statistics",
    "text": "5 Transformations and statistics\nSometimes we might want to apply some kind of transformation to our data while plotting so we can better see relationships between our variables.\nLet’s start with a base plot to see the relationship between GDP per capita (gdpPercap) and life expectancy (lifeExp).\n\ngapminder |&gt;\n  ggplot(aes(x = gdpPercap, y = lifeExp)) +\n  geom_point()\n\n\n\n\n\n\n\n\nThe presence of some outliers for gdpPercap make it hard to see this relationship. We can try log base 10 transforming the x-axis to see if this helps using a scale_*() function.\n\ngapminder |&gt;\n  ggplot(aes(x = gdpPercap, y = lifeExp)) +\n  geom_point() +\n  scale_x_log10() # log 10 scales the x axis\n\n\n\n\n\n\n\n\nI can also make our points a little bit transparent to ease our overplotting problem (where too many point are on top of each other, making each point hard to see) by setting alpha =. Alpha ranges from 0 (totally transparent) to 1 (totally opaque). Note that I alpha = 0.5 outside the aes() function - we are not mapping alpha to some variable, we are simply setting what alpha should be.\n\ngapminder |&gt;\n  ggplot(aes(x = gdpPercap, y = lifeExp)) +\n  geom_point(alpha = 0.5) + # not inside aes\n  scale_x_log10() # log10 transform the x-axis\n\n\n\n\n\n\n\n\nNow we can better see the parts of the plot that are very dark are where there are a lot of data points.\nWe can also add a smoothed line of fit to our data by setting method = \"lm\" within geom_smooth() to fit a linear model.\n\ngapminder |&gt;\n  ggplot(aes(x = gdpPercap, y = lifeExp)) +\n  geom_point(alpha = 0.5) + # not inside the aes\n  scale_x_log10() +\n  geom_smooth(method = \"lm\") # smooth with a linear model ie \"lm\"\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nWe can adjust the thickness of the line by setting linewidth within geom_smooth(), and turn off the confidence interval by setting se = FALSE.\n\ngapminder |&gt;\n  ggplot(aes(x = gdpPercap, y = lifeExp)) +\n  geom_point(alpha = 0.5) + # not inside the aes\n  scale_x_log10() +\n  geom_smooth(method = \"lm\", # smooth with a linear model ie \"lm\"\n              linewidth = 3, # increase thickness of the line\n              se = FALSE) # turn off plotting of a confident internal\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n5.1 Challenge 4A\nModify the color and the size of the points in the previous example. You’ll also probably want to make the linewidth less ridiculous.\n\n\nNeed a hint?\n\nDon’t put color and size inside aes().\n\n\n\nWant another hint?\n\nThe equivalent of linewidth for points is size.\n\n\n\nClick for the solution\n\n\ngapminder |&gt;\n  ggplot(aes(x = gdpPercap, y = lifeExp)) +\n  geom_point(alpha = 0.5, color = \"purple\", size = 0.5) + # outside the aes\n  scale_x_log10() +\n  geom_smooth(method = \"lm\", linewidth = 1) \n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.2 Challenge 4B\nModify the plot from 4A so points are a different shape and colored by continent with new trendlines\n\n\nNeed a hint?\n\nDon’t put color and size inside aes().\n\n\n\nWant another hint?\n\nThe equivalent of linewidth for points is size.\n\n\n\nClick for the solution\n\nAll points are now triangles. You can find info on the shape codes here.\n\ngapminder |&gt;\n  ggplot(aes(x = gdpPercap, y = lifeExp, color = continent)) +\n  geom_point(shape = 17, # 17 is a closed triangle\n             alpha = 0.5) + \n  scale_x_log10() +\n  geom_smooth(method = \"lm\", linewidth = 1) # smooth with a linear model ie \"lm\"\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nAll points are now open triangles, we are setting continent to fill and making the outline black. Note that only shapes 21-25 can accept both a color (outside) and fill (inside). Otherwise, they only accept color.\n\ngapminder |&gt;\n  ggplot(aes(x = gdpPercap, y = lifeExp, fill = continent)) +\n  geom_point(shape = 24, # open triangle\n             alpha = 0.5, \n             color = \"black\") + # color controls outside, fill controls inside\n  scale_x_log10() +\n  geom_smooth(method = \"lm\", linewidth = 1) # smooth with a linear model ie \"lm\"\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nMapping shape to continent\n\ngapminder |&gt;\n  ggplot(aes(x = gdpPercap, y = lifeExp, color = continent)) +\n  geom_point(aes(shape = continent), alpha = 0.5) + \n  scale_x_log10() +\n  geom_smooth(method = \"lm\", linewidth = 1) # smooth with a linear model ie \"lm\"\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "4_ggplot.html#multi-panel-figures",
    "href": "4_ggplot.html#multi-panel-figures",
    "title": "Creating publication quality graphics with ggplot2",
    "section": "6 Multi-panel figures",
    "text": "6 Multi-panel figures\nSmall multiples are a useful way to look at data across the same scale to understand patterns.\nLet’s say we want to understand how life expectancy changes over time throughout the Americas? Instead of making an individual plot for each country, we can use facet_wrap() to have ggplot make our plots all at once.\nFirst let’s use what Jelmer taught us to filter for only the observations from the Americas.\n\ngapminder_americas &lt;- gapminder |&gt;\n  filter(continent == \"Americas\")\n\nThen, this new data frame gapminder_americas can be the data for our next plot. Let’s look first without faceting.\n\ngapminder_americas |&gt;\n  ggplot(aes(x = year, y = lifeExp, group = country)) +\n  geom_line()\n\n\n\n\n\n\n\n\nFaceting allows us to better see each country on its own.\n\ngapminder_americas |&gt;\n  ggplot(aes(x = year, y = lifeExp)) +\n  geom_line() +\n  facet_wrap(vars(country))  # make facets by country"
  },
  {
    "objectID": "4_ggplot.html#modifying-text",
    "href": "4_ggplot.html#modifying-text",
    "title": "Creating publication quality graphics with ggplot2",
    "section": "7 Modifying text",
    "text": "7 Modifying text\nThe plots we’ve made so far could really benefit from some better labels. We can set what we want or plot labels to be as arguments in labs().\n\ngapminder_americas |&gt;\n  ggplot(aes(x = year, y = lifeExp)) +\n  geom_line() +\n  facet_wrap(vars(country)) + # make facets by country\n  labs(x = \"Year\",              # x axis title\n       y = \"Life expectancy\",   # y axis title\n       title = \"Figure 1. Life expectancy in the Americas from 1952-2007\", # main title of figure\n      )"
  },
  {
    "objectID": "4_ggplot.html#adjusting-theming",
    "href": "4_ggplot.html#adjusting-theming",
    "title": "Creating publication quality graphics with ggplot2",
    "section": "8 Adjusting theming",
    "text": "8 Adjusting theming\nWe can also modify the non-data elements on our plot by controlling the theming. We can do this in two general ways:\n\nby selecting a pre-set (or “complete”) theme, functions start with theme_*()\nby modifying individual settings using the function theme()\n\nWe will start with the pre-set themes by adding this function to the end of our ggplot code.\n\ngapminder_americas |&gt;\n  ggplot(aes(x = year, y = lifeExp)) +\n  geom_line() +\n  facet_wrap(vars(country)) + # make facets by country\n  theme(axis.text.x = element_text(angle = 45)) + # years on the x on a 45 deg angle\n  labs(x = \"Year\",              # x axis title\n       y = \"Life expectancy\",   # y axis title\n       title = \"Figure 1. Life expectancy in the Americas from 1952-2007\", # main title of figure\n      ) +\n  theme_bw() # change to a black and white theme\n\n\n\n\n\n\n\n\nIf we wanted to change the fonts, change the color the strip text (i.e., the text in the rectangle behind the names of the countries), the strip text background (i.e., the rectangle behind the names of the countries), adjust the x-axis year labels to be on an angle so they’re not so squished, we can do all that.\n\ngapminder_americas |&gt;\n  ggplot(aes(x = year, y = lifeExp)) +\n  geom_line() +\n  facet_wrap(vars(country)) + # make facets by country\n  theme(axis.text.x = element_text(angle = 45)) + # years on the x on a 45 deg angle\n  labs(x = \"Year\",              # x axis title\n       y = \"Life expectancy\",   # y axis title\n       title = \"Figure 1. Life expectancy in the Americas from 1952-2007\", # main title of figure\n      ) +\n  theme_bw() + # change to a black and white theme\n  theme(text = element_text(family = \"AppleGothic\"), # change all fonts\n        strip.background = element_rect(color = \"red\", fill = \"black\"), # strip text outline red, fill black\n        strip.text = element_text(color = \"white\"), # strip text white\n        axis.text.x = element_text(angle = 45, # years on the x on a 45 deg angle\n                                   vjust = 0.7)) # scoot year numbers down a lil\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nRemember that your code is run from top to bottom, so if code lower down over-writes something that came above, the lower code will prevail."
  },
  {
    "objectID": "4_ggplot.html#exporting-a-plot",
    "href": "4_ggplot.html#exporting-a-plot",
    "title": "Creating publication quality graphics with ggplot2",
    "section": "9 Exporting a plot",
    "text": "9 Exporting a plot\nOften we want to take our plot we have made using R and save it for use someplace else. You can export using the Export button in the Plots pane (bottom right) but you are limited on the parameters for the resulting figure.\nWe can do this with more control using the function ggsave().\nFirst we will save our plot as an object using the assignment operator &lt;-, here as life_exp_americas_plot.\n\nlife_exp_americas_plot &lt;- gapminder_americas |&gt;\n  ggplot(aes(x = year, y = lifeExp)) +\n  geom_line() +\n  facet_wrap(vars(country)) + # make facets by country\n  theme(axis.text.x = element_text(angle = 45)) + # years on the x on a 45 deg angle\n  labs(x = \"Year\",              # x axis title\n       y = \"Life expectancy\",   # y axis title\n       title = \"Figure 1. Life expectancy in the Americas from 1952-2007\", # main title of figure\n      ) +\n  theme_bw() + # change to a black and white theme\n  theme(text = element_text(family = \"AppleGothic\"), # change all fonts\n        strip.background = element_rect(color = \"red\", fill = \"black\"), # strip text outline red, fill black\n        strip.text = element_text(color = \"white\"), # strip text white\n        axis.text.x = element_text(angle = 45, # years on the x on a 45 deg angle\n                                   vjust = 0.7)) # scoot year numbers down a lil\n\nThen we can save it. I am indicating here to save the plot in a folder called results in my working directory, as a file called lifeExp.png. If you want your file to go within a folder, you have to first create that folder.\n\nggsave(filename = \"results/lifeExp.png\", # file path and name\n       plot = life_exp_americas_plot,  # what to save\n       width = 18, \n       height = 12, \n       dpi = 300, # dots per inch,  ie resolution\n       units = \"cm\") # units for width and height\n\n\n\n\n\n\n\nNote\n\n\n\nTo learn more about the arguments in ggsave() you can always run ?ggsave().\n\n\n\n9.1 Challenge 5\nCreate some box plots that compare life expectancy between the continents over the time period provided. Try and make your plot look nice, add labels and adjust the theme!\n\n\nNeed a hint?\n\nThe geom for making a boxplot is geom_boxplot().\n\n\n\nWant another hint?\n\nSet labels within labs(). Adjust theming with theme(). Check out the complete themes.\n\n\n\nClick for the solution\n\n\ngapminder |&gt;\n  ggplot(aes(x = continent, y = lifeExp, fill = continent)) +\n  geom_boxplot() +\n  facet_wrap(vars(year)) +\n  theme_classic() + # my favorite complete theme \n  theme(axis.title.x = element_blank(), # remove x-axis title\n        axis.text.x = element_blank(), # remove x-axis labels\n        axis.ticks.x = element_blank()) + # remove x-axis ticks\n  labs(y = \"Life Expectancy (years)\",\n       fill = \"Continent\") # change the label on top of the legend"
  },
  {
    "objectID": "1_intro.html",
    "href": "1_intro.html",
    "title": "Introduction to R and RStudio",
    "section": "",
    "text": "In this session, we will learn how to find your way around RStudio, how to interact with R, how to manage your environment, and how to install packages. Our objectives include:\nBy the end of this session, you will be well-equipped with the foundational skills needed to navigate RStudio and effectively interact with R."
  },
  {
    "objectID": "1_intro.html#why-use-r-and-r-studio",
    "href": "1_intro.html#why-use-r-and-r-studio",
    "title": "Introduction to R and RStudio",
    "section": "1 Why use R and R studio?",
    "text": "1 Why use R and R studio?\nScience is a multi-step process: once you’ve designed an experiment and collected data, the real fun begins with analysis! In this lesson, we will teach you some of the fundamentals of the R language and share best practices for organizing code in scientific projects, which will make your life easier.\nThough we could use a spreadsheet in Microsoft Excel or Google Sheets to analyze our data, these tools have limitations in terms of flexibility and accessibility. Moreover, they make it difficult to share the steps involved in exploring and modifying raw data, which is essential for conducting “reproducible” research.\nTherefore, this lesson will guide you on how to start exploring your data using R and RStudio. R is a program available for Windows, Mac, and Linux operating systems, and can be freely downloaded from the link provided above. To run R, all you need is the R program.\nSince R is open source, there are endlessly available free resource to learn how to do practically whatever you want on the internet."
  },
  {
    "objectID": "1_intro.html#overview",
    "href": "1_intro.html#overview",
    "title": "Introduction to R and RStudio",
    "section": "2 Overview",
    "text": "2 Overview\nWe will begin with raw data, perform exploratory analyses, and learn how to plot results graphically. This example starts with a dataset from gapminder.org containing population information for many countries through time. Can you read the data into R? Can you plot the population for Senegal? Can you calculate the average income for countries on the continent of Asia? By the end of these lessons you will be able to do things like plot the populations for all of these countries in under a minute!"
  },
  {
    "objectID": "1_intro.html#orienting-to-rstudio-basic-layout",
    "href": "1_intro.html#orienting-to-rstudio-basic-layout",
    "title": "Introduction to R and RStudio",
    "section": "3 Orienting to RStudio (basic layout)",
    "text": "3 Orienting to RStudio (basic layout)\nWhen you first open RStudio, you will be greeted by three panels:\n\nThe interactive R console/Terminal (entire left)\nEnvironment/History/Connections (tabbed in upper right)\nFiles/Plots/Packages/Help/Viewer (tabbed in lower right)\n\nOnce you open files, such as R scripts, an editor panel will also open in the top left. The RStudio integrated development environment (IDE) has four quadrants.\n\nTop left: your source editor. Here you can open, edit, and send code to be executed from files like .R, .Rmd, .qmd or others.\nBottom left: by default this is your console. If you’ve used standalone R, this is the same thing. It is here where your code will be actually executed. You can also type here directly to execute code. There are also two additional tabs, terminal and background jobs which we won’t talk about now.\nTop right: by default this is your environment. It will show you all the objects that are active in your R environment. Here, you can also see history, connections, build a website, use git, or open tutorials but we won’t talk about those now.\nBottom right: by default this shows the files in your working directory (more about that next). There are also additional tabs which show plots, packages, help, viewers, presentations but we won’t talk about those now.\n\nThere is an RStudio cheatsheet for the IDE which is very useful, and you can find it here."
  },
  {
    "objectID": "1_intro.html#r-scripts",
    "href": "1_intro.html#r-scripts",
    "title": "Introduction to R and RStudio",
    "section": "4 R scripts",
    "text": "4 R scripts\nOne of the panels contains a “Source Editor” pane, as in a Text Editor. Here, we can open and edit all sorts of text files — including R scripts. This quadrant will disappear if you have no files open:\nCreate and open a new R script by clicking File (top menu bar) &gt; New File &gt; R Script.\n\n4.1 Why use a script?\nAn R script is a text file that contains R code.\nIt’s a good idea to write and save most of our code in scripts.\nThis helps us keep track of what we’ve been doing, especially in the longer run, and to re-run our code after modifying input data or one of the lines of code.\n\n\n4.2 Sending code to the console\nWith the cursor on a line of code in the script, press Ctrl + Enter (or, on a Mac: Cmd + Enter)."
  },
  {
    "objectID": "1_intro.html#working-directories",
    "href": "1_intro.html#working-directories",
    "title": "Introduction to R and RStudio",
    "section": "5 Working directories",
    "text": "5 Working directories\n\n5.1 What is a directory and a working directory?\nUnderstanding directories and your working directory is crucial when coding. A directory can be thought of as a synonym for a folder, with each file contained within a directory. These folders have specific physical locations on your computer, known as paths. Directories are hierarchical and may differ slightly across various operating systems, such as Mac, Windows, and Linux. By using Finder (Mac) or File Explorer (Windows), you can navigate to different locations on your computer.\nYour working directory is exactly what it sounds like—it is the current location or path on your computer where you are actively working. This is important because, by default, your files will be read from, stored in, and saved to this location. Therefore, it is essential to know where your working directory is.\n\n\n5.2 Find your working directory\nWe can figure out where our working directory is by typing the function getwd() into the console. Note: I am using a Mac so you can see my path as forward slashes / while Windows machines will have backslashes \\.\nYou can also use the RStudio GUI to navigate to your working directory by going to the Files quadrant (bottom right), click the gear, and select Go To Working Directory.\n\n\n5.3 Set your working directory\nIf your working directory is not where you want to store your files, you can change it. We can do that using the function setwd().\nsetwd(\"/this/should/be/your/working-directory/path\")\nAlternatively, you can go to Session -&gt; Set Working DIrectory -&gt; Choose Directory…*\n\n\n5.4 Avoid all working directory nonsense with a .RProj"
  },
  {
    "objectID": "1_intro.html#r-as-calculator",
    "href": "1_intro.html#r-as-calculator",
    "title": "Introduction to R and RStudio",
    "section": "6 R as calculator",
    "text": "6 R as calculator\nWhen using R as a calculator, the order of operations is the same as you would have learned back in school.\nFrom highest to lowest precedence:\n\nParentheses: (, )\nExponents: ^ or **\nMultiply: *\nDivide: /\nAdd: +\nSubtract: -"
  },
  {
    "objectID": "1_intro.html#the-r-prompt",
    "href": "1_intro.html#the-r-prompt",
    "title": "Introduction to R and RStudio",
    "section": "7 The R prompt",
    "text": "7 The R prompt\nThe &gt; sign in your console is the R “prompt”. It indicates that R is ready for you to type something.\nWhen you are not seeing the &gt; prompt, R is either busy (because you asked it to do a longer-running computation) or waiting for you to complete an incomplete command.\nIf you notice that your prompt turned into a +.\nTo get out of this situation, one option is to try and finish the command (in this case, by typing another number) — but here, let’s practice another option: aborting the command by pressing Esc."
  },
  {
    "objectID": "1_intro.html#adding-comments-to-your-code",
    "href": "1_intro.html#adding-comments-to-your-code",
    "title": "Introduction to R and RStudio",
    "section": "8 Adding comments to your code",
    "text": "8 Adding comments to your code\nYou can use # signs to comment your code.\n\nAnything to the right of a # is ignored by R, meaning it won’t be executed.\nYou can use # both at the start of a line (entire line is a comment) or anywhere in a line following code (rest of the line is a comment).\nIn your R script, comments are formatted differently so you can clearly distinguish them from code."
  },
  {
    "objectID": "1_intro.html#functions-in-r",
    "href": "1_intro.html#functions-in-r",
    "title": "Introduction to R and RStudio",
    "section": "9 Functions in R",
    "text": "9 Functions in R\nAlmost everything is a function in R. Important functions that you have already used are install.packages() and library(). Let’s try it with gapminder and tidyverse:\n\ninstall.packages(\"gapminder\")\nlibrary(gapminder)\n\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)\n\nAnother important function is c(), which stands for combine or concatenate.\nBelow are examples of some other R functions:\n\n\n\n\n\n\n\nFunction\nDescription\n\n\nabs(x)\nabsolute value\n\n\nsqrt(x)\nsquare root\n\n\nceiling(x)\nceiling(3.475) is 4\n\n\nfloor(x)\nfloor(3.475) is 3\n\n\ntrunc(x)\ntrunc(5.99) is 5\n\n\nround(x , digits= n)\nround(3.475, digits=2) is 3.48\n\n\nsignif(x , digits= n)\nsignif(3.475, digits=2) is 3.5\n\n\ncos(x), sin(x), tan(x)\nalso asin(x), acos(x), cosh(x), acosh(x), etc.\n\n\nlog(x)\nnatural logarithm\n\n\nlog10(x)\ncommon logarithm\n\n\nexp(x)\ne^x"
  },
  {
    "objectID": "1_intro.html#comparing-things",
    "href": "1_intro.html#comparing-things",
    "title": "Introduction to R and RStudio",
    "section": "10 Comparing things",
    "text": "10 Comparing things\n\n\n\nOperator\nDescription\nExample\n\n\n\n\n&gt;\nGreater than\n5 &gt; 6 returns FALSE\n\n\n&lt;\nLess than\n5 &lt; 6 returns TRUE\n\n\n==\nEquals to\n10 == 10 returns TRUE\n\n\n!=\nNot equal to\n10 != 10 returns FALSE\n\n\n&gt;=\nGreater than or equal to\n5 &gt;= 6 returns FALSE\n\n\n&lt;=\nLess than or equal to\n6 &lt;= 6 returns TRUE"
  },
  {
    "objectID": "1_intro.html#r-objects",
    "href": "1_intro.html#r-objects",
    "title": "Introduction to R and RStudio",
    "section": "11 R objects",
    "text": "11 R objects\n\n11.1 Assigning stuff to objects\nWe can assign a value to an object with the assignment operator &lt;-. A few examples:\n\nlength_cm &lt;- 250\nconversion &lt;- 2.54\n\nlength_cm / conversion\n\nlength_in &lt;-  length_cm / conversion\n\n\n\n11.2 Object names\nSome pointers on object names:\n\nBecause R is case sensitive, length_inch is different from Length_Inch!\nAn object name cannot contain spaces — so for readability, you should separate words using:\n\nUnderscores: length_inch (this is called “snake case”)\nPeriods: wingspan.inch\nCapitalization: wingspanInch or WingspanInch (“camel case”)\n\nYou will make things easier for yourself by naming objects in a consistent way, for instance by always sticking to your favorite case style like “snake case.”\nObject names can contain but cannot start with a number: x2 is valid but 2x is not.\nMake object names descriptive yet not too long — this is not always easy!"
  },
  {
    "objectID": "1_intro.html#managing-your-environment",
    "href": "1_intro.html#managing-your-environment",
    "title": "Introduction to R and RStudio",
    "section": "12 Managing your environment",
    "text": "12 Managing your environment\nIntroduce ls() and rm()"
  },
  {
    "objectID": "1_intro.html#r-help-help-and",
    "href": "1_intro.html#r-help-help-and",
    "title": "Introduction to R and RStudio",
    "section": "13 R Help: help() and ?",
    "text": "13 R Help: help() and ?\nThe help() function and ? help operator in R offer access to documentation pages for R functions, data sets, and other objects. They provide access to both packages in the standard R distribution and contributed packages."
  },
  {
    "objectID": "2_data-structures.html#introduction",
    "href": "2_data-structures.html#introduction",
    "title": "R’s data structures and data types",
    "section": "1 Introduction",
    "text": "1 Introduction\n\nWhat we’ll cover\nIn this session, we will learn about R’s data structures and data types.\n\nData structures are the kinds of objects that R can store data in. Here, we will cover the two most common ones: vectors and data frames.\nData types are how R distinguishes between different kinds of data like numbers and character strings. Here, we’ll talk about the 4 main data types: character, integer, double, and logical.\n\n\n\nSetting up\nTo make it easier to keep track of what we do, we’ll write our code in a script (and send it to the console from there) – here is how to create and save a new R script:\n\nOpen a new R script (Click the + symbol in toolbar at the top, then click R Script) 1\nSave the script straight away as data-structures.R – you can save it anywhere you like, though it is probably best to save it in a folder specifically for this workshop."
  },
  {
    "objectID": "2_data-structures.html#data-structure-1-vectors",
    "href": "2_data-structures.html#data-structure-1-vectors",
    "title": "R’s data structures and data types",
    "section": "2 Data structure 1: Vectors",
    "text": "2 Data structure 1: Vectors\nThe first data structure we will explore is the simplest: the vector. A vector in R is essentially a collection of one or more items. Moving forward, we’ll call such individual items “elements”.\n\n2.1 Single-element vectors and quoting\nVectors can consist of just a single element, so each of the two lines of code below creates a vector:\n\nvector1 &lt;- 8\nvector2 &lt;- \"panda\"\n\nTwo things are worth noting about the \"panda\" example, which is a so-called character string (or string for short):\n\n\"panda\" constitutes one element, not 5 (its number of letters).\nUnlike when dealing with numbers, we have to quote the string.2\n\nCharacter strings need to be quoted because they are otherwise interpreted as R objects – for example, because our vectors vector1 and vector2 are objects, we refer to them without quotes:\n\n# [Note that R will show auto-complete options after you type 3 characters]\nvector1\n\n[1] 8\n\nvector2\n\n[1] \"panda\"\n\n\nTherefore, the code below doesn’t work, because there is no object called panda:\n\nvector_fail &lt;- panda\n\nError: object 'panda' not found\n\n\n\n\n\n2.2 Multi-element vectors\nA common way to make vectors with multiple elements is by using the c (combine) function:\n\nc(2, 6, 3)\n\n[1] 2 6 3\n\n\n\n\n\n\n\n\nUnlike in the first couple of vector examples, we didn’t save the above vector to an object: now the vector simply printed to the console – but it is created all the same.\n\n\n\nc() can also append elements to an existing vector:\n\n# First we create a vector:\nvector_to_append &lt;- c(\"vhagar\", \"meleys\")\nvector_to_append\n\n[1] \"vhagar\" \"meleys\"\n\n# Then we append another element to it:\nc(vector_to_append, \"balerion the dread\")\n\n[1] \"vhagar\"             \"meleys\"             \"balerion the dread\"\n\n\n\nTo create vectors with series of numbers, a couple of shortcuts are available. First, you can make series of whole numbers with the : operator:\n\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nSecond, you can use a function like seq() for fine control over the sequence:\n\nmyseq &lt;- seq(from = 6, to = 8, by = 0.2)\nmyseq\n\n [1] 6.0 6.2 6.4 6.6 6.8 7.0 7.2 7.4 7.6 7.8 8.0\n\n\n\n\n\n2.3 Vectorization\nConsider the output of this command:\n\nmyseq * 2\n\n [1] 12.0 12.4 12.8 13.2 13.6 14.0 14.4 14.8 15.2 15.6 16.0\n\n\nAbove, every individual element in myseq was multiplied by 2. We call this behavior “vectorization” and this is a key feature of the R language. (Alternatively, you may have expected this code to repeat myseq twice, but this did not happen!)\n\n\n\n\n\n\nFor more about vectorization, see episode 9 from the Carpentries lesson that this material is based on.\n\n\n\n\n\n\n Challenge 1\n\nA. Start by making a vector x with the whole numbers 1 through 26. Then, subtract 0.5 from each element in the vector and save the result in vector y. Check your results by printing both vectors.\n\n\nClick for the solution\n\n\nx &lt;- 1:26\nx\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26\n\ny &lt;- x - 0.5\ny\n\n [1]  0.5  1.5  2.5  3.5  4.5  5.5  6.5  7.5  8.5  9.5 10.5 11.5 12.5 13.5 14.5\n[16] 15.5 16.5 17.5 18.5 19.5 20.5 21.5 22.5 23.5 24.5 25.5\n\n\n\n\nB. What do you think will be the result of the following operation?\n\n1:5 * 1:5\n\n\n\nClick for the solution\n\n\n1:5 * 1:5\n\n[1]  1  4  9 16 25\n\n\nBoth vectors are of length 5 which will lead to “element-wise matching”: the first element in the first vector will be multiplied with the first element in the second vector, the second element in the first vector will be multiplied with the second element in the second vector, and so on.\n\n\n\n\n\n2.4 Exploring vectors\nR has many built-in functions to get information about vectors and other types of objects, such as:\nGet the first and last few elements, respectively, with head() and tail():\n\n# Print the first 6 elements:\nhead(myseq)\n\n[1] 6.0 6.2 6.4 6.6 6.8 7.0\n\n# Both head and tail take an argument `n` to specify the number of elements to print:\nhead(myseq, n = 2)\n\n[1] 6.0 6.2\n\n# Print the last 6 elements:\ntail(myseq)\n\n[1] 7.0 7.2 7.4 7.6 7.8 8.0\n\n\n\nGet the number of elements with length():\n\nlength(myseq)\n\n[1] 11\n\n\n\nGet arithmetic summaries like sum() and mean() for vectors with numbers:\n\n# sum() will sum the values of all elements\nsum(myseq)\n\n[1] 77\n\n# mean() will compute the mean (average) across all elements\nmean(myseq)\n\n[1] 7\n\n\n\n\n\n2.5 Extracting elements from vectors\nExtracting element from objects like vectors is often referred to as “indexing”. In R, we can do this using bracket notation – for example:\n\nGet the second element:\n\nmyseq[2]\n\n[1] 6.2\n\n\nGet the second through the fifth elements:\n\nmyseq[2:5]\n\n[1] 6.2 6.4 6.6 6.8\n\n\nGet the first and eight elements:\n\nmyseq[c(1, 8)]\n\n[1] 6.0 7.4\n\n\n\nTo put this in a general way: we can extract elements from a vector by using another vector, whose values are the positional indices of the elements in the original vector."
  },
  {
    "objectID": "2_data-structures.html#data-structure-2-data-frames",
    "href": "2_data-structures.html#data-structure-2-data-frames",
    "title": "R’s data structures and data types",
    "section": "3 Data structure 2: Data frames",
    "text": "3 Data structure 2: Data frames\n\n3.1 R stores tabular data in “data frames”\nOne of R’s most powerful features is its built-in ability to deal with tabular data – i.e., data with rows and columns like you are familiar with from spreadsheets like those you create with Excel.\nIn R, tabular data is stored in objects that are called “data frames”, the second R data structure we’ll cover in some depth. Let’s start by making a toy data frame with information about 3 cats:\n\ncats &lt;- data.frame(\n  name = c(\"Luna\", \"Thomas\", \"Daisy\"),\n  coat = c(\"calico\", \"black\", \"tabby\"),\n  weight = c(2.1, 5.0, 3.2)\n  )\n\ncats\n\n    name   coat weight\n1   Luna calico    2.1\n2 Thomas  black    5.0\n3  Daisy  tabby    3.2\n\n\nAbove:\n\nWe created 3 vectors and pasted them side-by-side to create a data frame in which each vector constitutes a column.\nWe gave each vector a name (e.g., coat), and those names became the column names.\nThe resulting data frame has 3 rows (one for each cat) and 3 columns (each with a type of info about the cats, like coat color).\n\nData frames are typically (and best) organized like above, where:\n\nEach column contains a different “variable” (e.g. coat color, weight)\nEach row contains a different “observation” (data on e.g. one cat/person/sample)\n\nThat’s all we’ll say about data frames for now, but in today’s remaining sessions we will explore this key R data structure more!"
  },
  {
    "objectID": "2_data-structures.html#data-types",
    "href": "2_data-structures.html#data-types",
    "title": "R’s data structures and data types",
    "section": "4 Data types",
    "text": "4 Data types\n\n4.1 R’s main Data Types\nR distinguishes different kinds of data, such as character strings and numbers, in a formal way, using several pre-defined “data types”. The behavior of R in various operations will depend heavily on the data type – for example, the below fails:\n\n\"valerion\" * 5\n\nError in \"valerion\" * 5: non-numeric argument to binary operator\n\n\nWe can ask what type of data something is in R using the typeof() function:\n\ntypeof(\"valerion\")\n\n[1] \"character\"\n\n\nR sets the data type of \"valerion\" to character, which we commonly refer to as character strings or strings. In formal terms, the failed command did not work because R will not allow us to perform mathematical functions on vectors of type character.\nThe character data type most commonly contains letters, but anything that is placed between quotes (\"...\") will be interpreted as the character data type — even plain numbers:\n\ntypeof(\"5\")\n\n[1] \"character\"\n\n\n\nBesides character, the other 3 common data types are:\n\ndouble / numeric – numbers that can have decimal points:\n\ntypeof(3.14)\n\n[1] \"double\"\n\n\ninteger – whole numbers only:\n\ntypeof(1:3)\n\n[1] \"integer\"\n\n\nlogical (either TRUE or FALSE – unquoted!):\n\ntypeof(TRUE)\n\n[1] \"logical\"\n\n\n\n\n\n\n4.2 Factors\nCategorical data, like treatments in an experiment, can be stored as “factors” in R. Factors are useful for statistical analyses and for plotting, e.g. because they allow you to specify a custom order.\n\ndiet_vec &lt;- c(\"high\", \"medium\", \"low\", \"low\", \"medium\")\ndiet_vec\n\n[1] \"high\"   \"medium\" \"low\"    \"low\"    \"medium\"\n\nfactor(diet_vec)\n\n[1] high   medium low    low    medium\nLevels: high low medium\n\n\nIn the example above, we turned a character vector into a factor. Its “levels” (low, medium, high) are sorted alphabetically by default, but we can manually specify an order that makes more sense:\n\ndiet_fct &lt;- factor(diet_vec, levels = c(\"low\", \"medium\", \"high\"))\ndiet_fct\n\n[1] high   medium low    low    medium\nLevels: low medium high\n\n\nThis ordering would be automatically respected in plots and statistical analyses.\n\n\n\n\n\n\n\nOddly, factors are technically not a data type (Click to expand)\n\n\n\n\n\nFor most intents and purposes, it makes sense to think of factors as another data type, even though technically, they are a kind of data structure build on the integer data type:\n\ntypeof(diet_fct)\n\n[1] \"integer\"\n\n\n\n\n\n\n\n\n4.3 A vector can only contain one data type\nIndividual vectors, and therefore also individual columns in data frames, can only be composed of a single data type.\nR will silently pick the “best-fitting” data type when you enter or read data into a data frame. So let’s see what the data types are in our cats data frame:\n\nstr(cats)\n\n'data.frame':   3 obs. of  3 variables:\n $ name  : chr  \"Luna\" \"Thomas\" \"Daisy\"\n $ coat  : chr  \"calico\" \"black\" \"tabby\"\n $ weight: num  2.1 5 3.2\n\n\n\nThe name and coat columns are character, abbreviated chr.\nThe weight column is double/numeric, abbreviated num.\n\n\n\n\n Challenge 2\nWhat type of vector (if any) do you think each of the following will produce?\n\ntypeof(\"TRUE\")\ntypeof(banana)\ntypeof(2, 6, \"3\")\n\n\n\nClick for the solutions\n\n\n\"TRUE\" is character because of the quotes around it.\nRecall the earlier example: this returns an error because the object banana does not exist.\nIt produces a character vector: we’ll talk about what happened here in the next section.\n\n\ntypeof(\"TRUE\")\n\n[1] \"character\"\n\ntypeof(banana)\n\nError: object 'banana' not found\n\ntypeof(c(2, 6, \"3\"))\n\n[1] \"character\"\n\n\n\n\n\n\n4.4 Automatic Type Coercion\nThat a character vector was returned by c(2, 6, \"3\") in the challenge above is due to something called type coercion.\nWhen R encounters a mix of types (here, numbers and characters) to be combined into a single vector, it will force them all to be the same type. It “must” do this because, as pointed out above, a vector can consist of only a single data type.\nType coercion can be the source of many surprises, and is one reason we need to be aware of the basic data types and how R will interpret them.\n\n\n\n4.5 Manual Type Conversion\nLuckily, you are not simply at the mercy of whatever R decides to do automatically, but can convert vectors at will using the as. group of functions:\n\n\n\n\n\n\nTry to use RStudio’s auto-complete functionality here: type “as.” and then press the Tab key.\n\n\n\n\n\n\n\nas.double(c(\"0\", \"2\", \"4\"))\n\n[1] 0 2 4\n\nas.character(c(0, 2, 4))\n\n[1] \"0\" \"2\" \"4\"\n\n\nAs you may have guessed, though, not all type conversions are possible — for example:\n\nas.double(\"kiwi\")\n\nWarning: NAs introduced by coercion\n\n\n[1] NA\n\n\n(NA is R’s way of denoting missing data – see this bonus section for more.)"
  },
  {
    "objectID": "2_data-structures.html#bonus-material-for-self-study",
    "href": "2_data-structures.html#bonus-material-for-self-study",
    "title": "R’s data structures and data types",
    "section": "5 Bonus material for self-study",
    "text": "5 Bonus material for self-study\n\n5.1 Changing vector elements using indexing\nAbove, we saw how we can extract elements of a vector using indexing. To change elements in a vector, simply use the bracket on the other side of the arrow – for example:\n\nChange the first element to 30:\n\nmyseq[1] &lt;- 30\nmyseq\n\n [1] 30.0  6.2  6.4  6.6  6.8  7.0  7.2  7.4  7.6  7.8  8.0\n\n\nChange the last element to 0:\n\nmyseq[length(myseq)] &lt;- 0\nmyseq\n\n [1] 30.0  6.2  6.4  6.6  6.8  7.0  7.2  7.4  7.6  7.8  0.0\n\n\nChange the second element to the mean value of the vector:\n\nmyseq[2] &lt;- mean(myseq)\nmyseq\n\n [1] 30.000000  8.454545  6.400000  6.600000  6.800000  7.000000  7.200000\n [8]  7.400000  7.600000  7.800000  0.000000\n\n\n\n\n\n\n5.2 Extracting columns from a data frame\nWe can extract individual columns from a data frame using the $ operator:\n\ncats$weight\n\n[1] 2.1 5.0 3.2\n\ncats$coat\n\n[1] \"calico\" \"black\"  \"tabby\" \n\n\nThis kind of operation will return a vector – and can be indexed as well:\n\ncats$weight[2]\n\n[1] 5\n\n\n\n\n\n5.3 More on the logical data type\nLet’s add a column to our cats data frame indicating whether each cat does or does not like string:\n\ncats$likes_string &lt;- c(1, 0, 1)\ncats\n\n    name   coat weight likes_string\n1   Luna calico    2.1            1\n2 Thomas  black    5.0            0\n3  Daisy  tabby    3.2            1\n\n\nSo, likes_string is numeric, but the 1s and 0s actually represent TRUE and FALSE.\nWe could instead use the logical data type here, by converting this column with the as.logical() function, which will turn 0’s into FALSE and everything else, including 1, to TRUE:\n\nas.logical(cats$likes_string)\n\n[1]  TRUE FALSE  TRUE\n\n\nAnd to actually modify this column in the dataframe itself, we would do this:\n\ncats$likes_string &lt;- as.logical(cats$likes_string)\ncats\n\n    name   coat weight likes_string\n1   Luna calico    2.1         TRUE\n2 Thomas  black    5.0        FALSE\n3  Daisy  tabby    3.2         TRUE\n\n\n\nYou might think that 1/0 could be a handier coding than TRUE/FALSE because it may make it easier, for exmaple, to count the number of times something is true or false. But consider the following:\n\nTRUE + TRUE\n\n[1] 2\n\n\nSo, logicals can be used as if they were numbers, in which case FALSE represents 0 and TRUE represents 1.\n\n\n\n5.4 Missing values (NA)\nR has a concept of missing data, which is important in statistical computing, as not all information/measurements are always available for each sample.\nIn R, missing values are coded as NA (and like TRUE/FALSE, this is not a character string, so it is not quoted):\n\n# This vector will contain one missing value\nvector_NA &lt;- c(1, 3, NA, 7)\nvector_NA\n\n[1]  1  3 NA  7\n\n\nA key thing to be aware of with NAs is that many functions that operate on vectors will return NA if any element in the vector is NA:\n\nsum(vector_NA)\n\n[1] NA\n\n\nThe way to get around this is by setting na.rm = TRUE in such functions, for example:\n\nsum(vector_NA, na.rm = TRUE)\n\n[1] 11\n\n\n\n\n\n5.5 A few other data structures in R\nWe did not go into details about R’s other data structures, which are less common than vectors and data frames. Two that are worth mentioning briefly, though, are:\n\nMatrix, which can be convenient when you have tabular data that is exclusively numeric (excluding names/labels).\nList, which is more flexible (and complicated) than vectors: it can contain multiple data types, and can also be hierarchically structured.\n\n\n\n\n Bonus Challenge\nAn important part of every data analysis is cleaning input data. Here, you will clean a cat data set that has an added observation with a problematic data entry.\nStart by creating the new data frame:\n\ncats_v2 &lt;- data.frame(\n  name = c(\"Luna\", \"Thomas\", \"Daisy\", \"Oliver\"),\n  coat = c(\"calico\", \"black\", \"tabby\", \"tabby\"),\n  weight = c(2.1, 5.0, 3.2, \"2.3 or 2.4\")\n)\n\nThen move on to the tasks below, filling in the blanks (_____) and running the code:\n\n# 1. Explore the data frame,\n#    including with an overview that shows the columns' data types:\ncats_v2\n_____(cats_v2)\n\n# 2. The \"weight\" column has the incorrect data type _____.\n#    The correct data type is: _____.\n\n# 3. Correct the 4th weight with the mean of the two given values,\n#    then print the data frame to see the effect:\ncats_v2$weight[4] &lt;- 2.35\ncats_v2\n\n# 4. Convert the weight column to the right data type:\ncats_v2$weight &lt;- _____(cats_v2$weight)\n\n# 5. Calculate the mean weight of the cats:\n_____\n\n\n\nClick for the solution\n\n\n# 1. Explore the data frame,\n#    including with an overview that shows the columns' data types:\ncats_v2\n\n    name   coat     weight\n1   Luna calico        2.1\n2 Thomas  black          5\n3  Daisy  tabby        3.2\n4 Oliver  tabby 2.3 or 2.4\n\nstr(cats_v2)\n\n'data.frame':   4 obs. of  3 variables:\n $ name  : chr  \"Luna\" \"Thomas\" \"Daisy\" \"Oliver\"\n $ coat  : chr  \"calico\" \"black\" \"tabby\" \"tabby\"\n $ weight: chr  \"2.1\" \"5\" \"3.2\" \"2.3 or 2.4\"\n\n# 2. The \"weight\" column has the incorrect data type CHARACTER.\n#    The correct data type is: DOUBLE.\n\n# 3. Correct the 4th weight data point with the mean of the two given values,\n#    then print the data frame to see the effect:\ncats_v2$weight[4] &lt;- 2.35\ncats_v2\n\n    name   coat weight\n1   Luna calico    2.1\n2 Thomas  black      5\n3  Daisy  tabby    3.2\n4 Oliver  tabby   2.35\n\n# 4. Convert the weight column to the right data type:\ncats_v2$weight &lt;- as.double(cats_v2$weight)\n\n# 5. Calculate the mean weight of the cats:\nmean(cats_v2$weight)\n\n[1] 3.1625\n\n\n\n\n\n\n5.6 Learn more\nTo learn more about data types and data structures, see this episode from a separate Carpentries lesson."
  },
  {
    "objectID": "2_data-structures.html#footnotes",
    "href": "2_data-structures.html#footnotes",
    "title": "R’s data structures and data types",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nOr Click File =&gt; New file =&gt; R Script↩︎\n Either double quotes (\"...\") or single quotes ('...') work, but the former are most commonly used by convention.↩︎"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Workshop on R for Reproducibility",
    "section": "",
    "text": "Schedule\n\n\n\nTime\nInstructor\nTopic & link\n\n\n\n\nBefore starting\n-\nInstall and set up R and RStudio\n\n\n9:00 - 9:20 am\nall\nPre-workshop survey (if only attending today), intro, logistics\n\n\n9:20 - 10:15 am\nHoracio\n1: Introduction to R and RStudio\n\n\n10:15 - 10:30 am\n-\nBreak\n\n\n10:30 - 11:30 am\nJelmer\n2: R data structures\n\n\n11:30 am - 12:15 pm\n-\nLunch\n\n\n12:15 - 1:15 pm\nJelmer\n3: Data manipulation with dplyr\n\n\n1:15 - 1:30 pm\n-\nBreak\n\n\n1:30 - 2:50 pm\nJessica\n4: Visualization with ggplot2\n\n\n2:50 - 3:00 pm\n-\nPost-workshop survey\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "1 Ohio State R for Reproducible Research Carpentries Workshop Feb 11, 2025",
    "section": "",
    "text": "1 Ohio State R for Reproducible Research Carpentries Workshop Feb 11, 2025\nThis is source repo for the website for the hands-on “R for Reproducibility” workshop taught at Ohio State University on February 11th, 2025.\nThis workshop is taught by the organizers of Ohio State’s Code Club, Jelmer Poelstra, Horacio Lopez-Nicora, and Jessica Cooperstone.\nYou can find the website with course materials at https://osu-codeclub.github.io/carpentries-feb-2025/.\n\n\n\n\n Back to top"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About this website",
    "section": "",
    "text": "This is the website for the hands-on “R for Reproducibility” workshop taught at Ohio State University on February 11th, 2025.\n\n\nPractical info about the workshop\nR is a programming language that is especially powerful for data exploration, visualization, and statistical analysis. During this workshop, participants will learn the basics of R and RStudio, and how to use R for reproducible data manipulation and visualization.\nIf you are affiliated with Ohio State University in any capacity, you can attend this workshop for free by registering here.\nThere are no prerequisites: this workshop is suitable for complete beginners in R and in coding in general.\nYou can attend the workshop either online via Zoom or in-person at co-learning sites in Columbus or Wooster (information will be sent after registration).\n\n\n\nInstructors and organizers\nThis workshop is taught by the organizers of OSU Code Club:\n\nHoracio Lopez-Nicora – Assistant Professor in the department of Plant Pathology\nJelmer Poelstra – Bioinformatics & Microscopy Lead at the CFAES Molecular and Cellular Imaging Center (MCIC)\nJessica Cooperstone – Associate Professor in the departments of Horticulture & Crop Science, and Food Science & Technology\n\nThe following helpers will be assisisting participants:\n\nMenuka Bhandari\nFiama Guevara-Guillen\nMelanie Medina-Lopez\nDhanashree\nKelsey Badger\nMatthew Thompson\nElizabeth Campolongo\nJosh Wang\nNet Zhang\nAndrey Kopanev\n\nThis workshop is organized by Kelsey Badger at the OSU Research Commons, Matthew Thompson and Elizabeth Campolongo at the OSU Imageomics Institute, and the abovementioned instructors, and is part of OSU’s 2025 International Love Data Week activities.\n\n\nCarpentries\nThis is a Carpentries workshop. The Carpentries project comprises the Software Carpentry, Data Carpentry, and Library Carpentry communities of Instructors, Trainers, Maintainers, helpers, and supporters who share a mission to teach foundational computational and data science skills to researchers.\nThe material on this website has been adapted from the R for Reproducible Scientific Analysis Software Carpentry lesson.\nCarpentries website for this workshop and the sister workshop on version control on Feb 14th.\n\n\n\n\n Back to top"
  }
]